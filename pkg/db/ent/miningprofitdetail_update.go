// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/ledger-manager/pkg/db/ent/miningprofitdetail"
	"github.com/NpoolPlatform/ledger-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// MiningProfitDetailUpdate is the builder for updating MiningProfitDetail entities.
type MiningProfitDetailUpdate struct {
	config
	hooks     []Hook
	mutation  *MiningProfitDetailMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MiningProfitDetailUpdate builder.
func (mpdu *MiningProfitDetailUpdate) Where(ps ...predicate.MiningProfitDetail) *MiningProfitDetailUpdate {
	mpdu.mutation.Where(ps...)
	return mpdu
}

// SetCreatedAt sets the "created_at" field.
func (mpdu *MiningProfitDetailUpdate) SetCreatedAt(u uint32) *MiningProfitDetailUpdate {
	mpdu.mutation.ResetCreatedAt()
	mpdu.mutation.SetCreatedAt(u)
	return mpdu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mpdu *MiningProfitDetailUpdate) SetNillableCreatedAt(u *uint32) *MiningProfitDetailUpdate {
	if u != nil {
		mpdu.SetCreatedAt(*u)
	}
	return mpdu
}

// AddCreatedAt adds u to the "created_at" field.
func (mpdu *MiningProfitDetailUpdate) AddCreatedAt(u int32) *MiningProfitDetailUpdate {
	mpdu.mutation.AddCreatedAt(u)
	return mpdu
}

// SetUpdatedAt sets the "updated_at" field.
func (mpdu *MiningProfitDetailUpdate) SetUpdatedAt(u uint32) *MiningProfitDetailUpdate {
	mpdu.mutation.ResetUpdatedAt()
	mpdu.mutation.SetUpdatedAt(u)
	return mpdu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (mpdu *MiningProfitDetailUpdate) AddUpdatedAt(u int32) *MiningProfitDetailUpdate {
	mpdu.mutation.AddUpdatedAt(u)
	return mpdu
}

// SetDeletedAt sets the "deleted_at" field.
func (mpdu *MiningProfitDetailUpdate) SetDeletedAt(u uint32) *MiningProfitDetailUpdate {
	mpdu.mutation.ResetDeletedAt()
	mpdu.mutation.SetDeletedAt(u)
	return mpdu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mpdu *MiningProfitDetailUpdate) SetNillableDeletedAt(u *uint32) *MiningProfitDetailUpdate {
	if u != nil {
		mpdu.SetDeletedAt(*u)
	}
	return mpdu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (mpdu *MiningProfitDetailUpdate) AddDeletedAt(u int32) *MiningProfitDetailUpdate {
	mpdu.mutation.AddDeletedAt(u)
	return mpdu
}

// SetGoodID sets the "good_id" field.
func (mpdu *MiningProfitDetailUpdate) SetGoodID(u uuid.UUID) *MiningProfitDetailUpdate {
	mpdu.mutation.SetGoodID(u)
	return mpdu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (mpdu *MiningProfitDetailUpdate) SetNillableGoodID(u *uuid.UUID) *MiningProfitDetailUpdate {
	if u != nil {
		mpdu.SetGoodID(*u)
	}
	return mpdu
}

// ClearGoodID clears the value of the "good_id" field.
func (mpdu *MiningProfitDetailUpdate) ClearGoodID() *MiningProfitDetailUpdate {
	mpdu.mutation.ClearGoodID()
	return mpdu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (mpdu *MiningProfitDetailUpdate) SetCoinTypeID(u uuid.UUID) *MiningProfitDetailUpdate {
	mpdu.mutation.SetCoinTypeID(u)
	return mpdu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (mpdu *MiningProfitDetailUpdate) SetNillableCoinTypeID(u *uuid.UUID) *MiningProfitDetailUpdate {
	if u != nil {
		mpdu.SetCoinTypeID(*u)
	}
	return mpdu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (mpdu *MiningProfitDetailUpdate) ClearCoinTypeID() *MiningProfitDetailUpdate {
	mpdu.mutation.ClearCoinTypeID()
	return mpdu
}

// SetAmount sets the "amount" field.
func (mpdu *MiningProfitDetailUpdate) SetAmount(d decimal.Decimal) *MiningProfitDetailUpdate {
	mpdu.mutation.ResetAmount()
	mpdu.mutation.SetAmount(d)
	return mpdu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (mpdu *MiningProfitDetailUpdate) SetNillableAmount(d *decimal.Decimal) *MiningProfitDetailUpdate {
	if d != nil {
		mpdu.SetAmount(*d)
	}
	return mpdu
}

// AddAmount adds d to the "amount" field.
func (mpdu *MiningProfitDetailUpdate) AddAmount(d decimal.Decimal) *MiningProfitDetailUpdate {
	mpdu.mutation.AddAmount(d)
	return mpdu
}

// ClearAmount clears the value of the "amount" field.
func (mpdu *MiningProfitDetailUpdate) ClearAmount() *MiningProfitDetailUpdate {
	mpdu.mutation.ClearAmount()
	return mpdu
}

// SetBenefitDate sets the "benefit_date" field.
func (mpdu *MiningProfitDetailUpdate) SetBenefitDate(u uint32) *MiningProfitDetailUpdate {
	mpdu.mutation.ResetBenefitDate()
	mpdu.mutation.SetBenefitDate(u)
	return mpdu
}

// SetNillableBenefitDate sets the "benefit_date" field if the given value is not nil.
func (mpdu *MiningProfitDetailUpdate) SetNillableBenefitDate(u *uint32) *MiningProfitDetailUpdate {
	if u != nil {
		mpdu.SetBenefitDate(*u)
	}
	return mpdu
}

// AddBenefitDate adds u to the "benefit_date" field.
func (mpdu *MiningProfitDetailUpdate) AddBenefitDate(u int32) *MiningProfitDetailUpdate {
	mpdu.mutation.AddBenefitDate(u)
	return mpdu
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (mpdu *MiningProfitDetailUpdate) ClearBenefitDate() *MiningProfitDetailUpdate {
	mpdu.mutation.ClearBenefitDate()
	return mpdu
}

// Mutation returns the MiningProfitDetailMutation object of the builder.
func (mpdu *MiningProfitDetailUpdate) Mutation() *MiningProfitDetailMutation {
	return mpdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mpdu *MiningProfitDetailUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := mpdu.defaults(); err != nil {
		return 0, err
	}
	if len(mpdu.hooks) == 0 {
		affected, err = mpdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MiningProfitDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mpdu.mutation = mutation
			affected, err = mpdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mpdu.hooks) - 1; i >= 0; i-- {
			if mpdu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mpdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mpdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mpdu *MiningProfitDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := mpdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mpdu *MiningProfitDetailUpdate) Exec(ctx context.Context) error {
	_, err := mpdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpdu *MiningProfitDetailUpdate) ExecX(ctx context.Context) {
	if err := mpdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpdu *MiningProfitDetailUpdate) defaults() error {
	if _, ok := mpdu.mutation.UpdatedAt(); !ok {
		if miningprofitdetail.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized miningprofitdetail.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := miningprofitdetail.UpdateDefaultUpdatedAt()
		mpdu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mpdu *MiningProfitDetailUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MiningProfitDetailUpdate {
	mpdu.modifiers = append(mpdu.modifiers, modifiers...)
	return mpdu
}

func (mpdu *MiningProfitDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   miningprofitdetail.Table,
			Columns: miningprofitdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: miningprofitdetail.FieldID,
			},
		},
	}
	if ps := mpdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpdu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitdetail.FieldCreatedAt,
		})
	}
	if value, ok := mpdu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitdetail.FieldCreatedAt,
		})
	}
	if value, ok := mpdu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitdetail.FieldUpdatedAt,
		})
	}
	if value, ok := mpdu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitdetail.FieldUpdatedAt,
		})
	}
	if value, ok := mpdu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitdetail.FieldDeletedAt,
		})
	}
	if value, ok := mpdu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitdetail.FieldDeletedAt,
		})
	}
	if value, ok := mpdu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: miningprofitdetail.FieldGoodID,
		})
	}
	if mpdu.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: miningprofitdetail.FieldGoodID,
		})
	}
	if value, ok := mpdu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: miningprofitdetail.FieldCoinTypeID,
		})
	}
	if mpdu.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: miningprofitdetail.FieldCoinTypeID,
		})
	}
	if value, ok := mpdu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: miningprofitdetail.FieldAmount,
		})
	}
	if value, ok := mpdu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: miningprofitdetail.FieldAmount,
		})
	}
	if mpdu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: miningprofitdetail.FieldAmount,
		})
	}
	if value, ok := mpdu.mutation.BenefitDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitdetail.FieldBenefitDate,
		})
	}
	if value, ok := mpdu.mutation.AddedBenefitDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitdetail.FieldBenefitDate,
		})
	}
	if mpdu.mutation.BenefitDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: miningprofitdetail.FieldBenefitDate,
		})
	}
	_spec.Modifiers = mpdu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, mpdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{miningprofitdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// MiningProfitDetailUpdateOne is the builder for updating a single MiningProfitDetail entity.
type MiningProfitDetailUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MiningProfitDetailMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (mpduo *MiningProfitDetailUpdateOne) SetCreatedAt(u uint32) *MiningProfitDetailUpdateOne {
	mpduo.mutation.ResetCreatedAt()
	mpduo.mutation.SetCreatedAt(u)
	return mpduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mpduo *MiningProfitDetailUpdateOne) SetNillableCreatedAt(u *uint32) *MiningProfitDetailUpdateOne {
	if u != nil {
		mpduo.SetCreatedAt(*u)
	}
	return mpduo
}

// AddCreatedAt adds u to the "created_at" field.
func (mpduo *MiningProfitDetailUpdateOne) AddCreatedAt(u int32) *MiningProfitDetailUpdateOne {
	mpduo.mutation.AddCreatedAt(u)
	return mpduo
}

// SetUpdatedAt sets the "updated_at" field.
func (mpduo *MiningProfitDetailUpdateOne) SetUpdatedAt(u uint32) *MiningProfitDetailUpdateOne {
	mpduo.mutation.ResetUpdatedAt()
	mpduo.mutation.SetUpdatedAt(u)
	return mpduo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (mpduo *MiningProfitDetailUpdateOne) AddUpdatedAt(u int32) *MiningProfitDetailUpdateOne {
	mpduo.mutation.AddUpdatedAt(u)
	return mpduo
}

// SetDeletedAt sets the "deleted_at" field.
func (mpduo *MiningProfitDetailUpdateOne) SetDeletedAt(u uint32) *MiningProfitDetailUpdateOne {
	mpduo.mutation.ResetDeletedAt()
	mpduo.mutation.SetDeletedAt(u)
	return mpduo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mpduo *MiningProfitDetailUpdateOne) SetNillableDeletedAt(u *uint32) *MiningProfitDetailUpdateOne {
	if u != nil {
		mpduo.SetDeletedAt(*u)
	}
	return mpduo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (mpduo *MiningProfitDetailUpdateOne) AddDeletedAt(u int32) *MiningProfitDetailUpdateOne {
	mpduo.mutation.AddDeletedAt(u)
	return mpduo
}

// SetGoodID sets the "good_id" field.
func (mpduo *MiningProfitDetailUpdateOne) SetGoodID(u uuid.UUID) *MiningProfitDetailUpdateOne {
	mpduo.mutation.SetGoodID(u)
	return mpduo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (mpduo *MiningProfitDetailUpdateOne) SetNillableGoodID(u *uuid.UUID) *MiningProfitDetailUpdateOne {
	if u != nil {
		mpduo.SetGoodID(*u)
	}
	return mpduo
}

// ClearGoodID clears the value of the "good_id" field.
func (mpduo *MiningProfitDetailUpdateOne) ClearGoodID() *MiningProfitDetailUpdateOne {
	mpduo.mutation.ClearGoodID()
	return mpduo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (mpduo *MiningProfitDetailUpdateOne) SetCoinTypeID(u uuid.UUID) *MiningProfitDetailUpdateOne {
	mpduo.mutation.SetCoinTypeID(u)
	return mpduo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (mpduo *MiningProfitDetailUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *MiningProfitDetailUpdateOne {
	if u != nil {
		mpduo.SetCoinTypeID(*u)
	}
	return mpduo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (mpduo *MiningProfitDetailUpdateOne) ClearCoinTypeID() *MiningProfitDetailUpdateOne {
	mpduo.mutation.ClearCoinTypeID()
	return mpduo
}

// SetAmount sets the "amount" field.
func (mpduo *MiningProfitDetailUpdateOne) SetAmount(d decimal.Decimal) *MiningProfitDetailUpdateOne {
	mpduo.mutation.ResetAmount()
	mpduo.mutation.SetAmount(d)
	return mpduo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (mpduo *MiningProfitDetailUpdateOne) SetNillableAmount(d *decimal.Decimal) *MiningProfitDetailUpdateOne {
	if d != nil {
		mpduo.SetAmount(*d)
	}
	return mpduo
}

// AddAmount adds d to the "amount" field.
func (mpduo *MiningProfitDetailUpdateOne) AddAmount(d decimal.Decimal) *MiningProfitDetailUpdateOne {
	mpduo.mutation.AddAmount(d)
	return mpduo
}

// ClearAmount clears the value of the "amount" field.
func (mpduo *MiningProfitDetailUpdateOne) ClearAmount() *MiningProfitDetailUpdateOne {
	mpduo.mutation.ClearAmount()
	return mpduo
}

// SetBenefitDate sets the "benefit_date" field.
func (mpduo *MiningProfitDetailUpdateOne) SetBenefitDate(u uint32) *MiningProfitDetailUpdateOne {
	mpduo.mutation.ResetBenefitDate()
	mpduo.mutation.SetBenefitDate(u)
	return mpduo
}

// SetNillableBenefitDate sets the "benefit_date" field if the given value is not nil.
func (mpduo *MiningProfitDetailUpdateOne) SetNillableBenefitDate(u *uint32) *MiningProfitDetailUpdateOne {
	if u != nil {
		mpduo.SetBenefitDate(*u)
	}
	return mpduo
}

// AddBenefitDate adds u to the "benefit_date" field.
func (mpduo *MiningProfitDetailUpdateOne) AddBenefitDate(u int32) *MiningProfitDetailUpdateOne {
	mpduo.mutation.AddBenefitDate(u)
	return mpduo
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (mpduo *MiningProfitDetailUpdateOne) ClearBenefitDate() *MiningProfitDetailUpdateOne {
	mpduo.mutation.ClearBenefitDate()
	return mpduo
}

// Mutation returns the MiningProfitDetailMutation object of the builder.
func (mpduo *MiningProfitDetailUpdateOne) Mutation() *MiningProfitDetailMutation {
	return mpduo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mpduo *MiningProfitDetailUpdateOne) Select(field string, fields ...string) *MiningProfitDetailUpdateOne {
	mpduo.fields = append([]string{field}, fields...)
	return mpduo
}

// Save executes the query and returns the updated MiningProfitDetail entity.
func (mpduo *MiningProfitDetailUpdateOne) Save(ctx context.Context) (*MiningProfitDetail, error) {
	var (
		err  error
		node *MiningProfitDetail
	)
	if err := mpduo.defaults(); err != nil {
		return nil, err
	}
	if len(mpduo.hooks) == 0 {
		node, err = mpduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MiningProfitDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mpduo.mutation = mutation
			node, err = mpduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mpduo.hooks) - 1; i >= 0; i-- {
			if mpduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mpduo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mpduo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*MiningProfitDetail)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MiningProfitDetailMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mpduo *MiningProfitDetailUpdateOne) SaveX(ctx context.Context) *MiningProfitDetail {
	node, err := mpduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mpduo *MiningProfitDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := mpduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpduo *MiningProfitDetailUpdateOne) ExecX(ctx context.Context) {
	if err := mpduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpduo *MiningProfitDetailUpdateOne) defaults() error {
	if _, ok := mpduo.mutation.UpdatedAt(); !ok {
		if miningprofitdetail.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized miningprofitdetail.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := miningprofitdetail.UpdateDefaultUpdatedAt()
		mpduo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mpduo *MiningProfitDetailUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MiningProfitDetailUpdateOne {
	mpduo.modifiers = append(mpduo.modifiers, modifiers...)
	return mpduo
}

func (mpduo *MiningProfitDetailUpdateOne) sqlSave(ctx context.Context) (_node *MiningProfitDetail, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   miningprofitdetail.Table,
			Columns: miningprofitdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: miningprofitdetail.FieldID,
			},
		},
	}
	id, ok := mpduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MiningProfitDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mpduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, miningprofitdetail.FieldID)
		for _, f := range fields {
			if !miningprofitdetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != miningprofitdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mpduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpduo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitdetail.FieldCreatedAt,
		})
	}
	if value, ok := mpduo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitdetail.FieldCreatedAt,
		})
	}
	if value, ok := mpduo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitdetail.FieldUpdatedAt,
		})
	}
	if value, ok := mpduo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitdetail.FieldUpdatedAt,
		})
	}
	if value, ok := mpduo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitdetail.FieldDeletedAt,
		})
	}
	if value, ok := mpduo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitdetail.FieldDeletedAt,
		})
	}
	if value, ok := mpduo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: miningprofitdetail.FieldGoodID,
		})
	}
	if mpduo.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: miningprofitdetail.FieldGoodID,
		})
	}
	if value, ok := mpduo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: miningprofitdetail.FieldCoinTypeID,
		})
	}
	if mpduo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: miningprofitdetail.FieldCoinTypeID,
		})
	}
	if value, ok := mpduo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: miningprofitdetail.FieldAmount,
		})
	}
	if value, ok := mpduo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: miningprofitdetail.FieldAmount,
		})
	}
	if mpduo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: miningprofitdetail.FieldAmount,
		})
	}
	if value, ok := mpduo.mutation.BenefitDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitdetail.FieldBenefitDate,
		})
	}
	if value, ok := mpduo.mutation.AddedBenefitDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitdetail.FieldBenefitDate,
		})
	}
	if mpduo.mutation.BenefitDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: miningprofitdetail.FieldBenefitDate,
		})
	}
	_spec.Modifiers = mpduo.modifiers
	_node = &MiningProfitDetail{config: mpduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mpduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{miningprofitdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
