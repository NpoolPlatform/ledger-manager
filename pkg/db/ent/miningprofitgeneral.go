// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/ledger-manager/pkg/db/ent/miningprofitgeneral"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// MiningProfitGeneral is the model entity for the MiningProfitGeneral schema.
type MiningProfitGeneral struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// CoinTypeID holds the value of the "coin_type_id" field.
	CoinTypeID uuid.UUID `json:"coin_type_id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount decimal.Decimal `json:"amount,omitempty"`
	// ToPlatform holds the value of the "to_platform" field.
	ToPlatform decimal.Decimal `json:"to_platform,omitempty"`
	// ToUser holds the value of the "to_user" field.
	ToUser decimal.Decimal `json:"to_user,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MiningProfitGeneral) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case miningprofitgeneral.FieldAmount, miningprofitgeneral.FieldToPlatform, miningprofitgeneral.FieldToUser:
			values[i] = new(decimal.Decimal)
		case miningprofitgeneral.FieldCreatedAt, miningprofitgeneral.FieldUpdatedAt, miningprofitgeneral.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case miningprofitgeneral.FieldID, miningprofitgeneral.FieldGoodID, miningprofitgeneral.FieldCoinTypeID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MiningProfitGeneral", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MiningProfitGeneral fields.
func (mpg *MiningProfitGeneral) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case miningprofitgeneral.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				mpg.ID = *value
			}
		case miningprofitgeneral.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mpg.CreatedAt = uint32(value.Int64)
			}
		case miningprofitgeneral.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mpg.UpdatedAt = uint32(value.Int64)
			}
		case miningprofitgeneral.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				mpg.DeletedAt = uint32(value.Int64)
			}
		case miningprofitgeneral.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				mpg.GoodID = *value
			}
		case miningprofitgeneral.FieldCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type_id", values[i])
			} else if value != nil {
				mpg.CoinTypeID = *value
			}
		case miningprofitgeneral.FieldAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				mpg.Amount = *value
			}
		case miningprofitgeneral.FieldToPlatform:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field to_platform", values[i])
			} else if value != nil {
				mpg.ToPlatform = *value
			}
		case miningprofitgeneral.FieldToUser:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field to_user", values[i])
			} else if value != nil {
				mpg.ToUser = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this MiningProfitGeneral.
// Note that you need to call MiningProfitGeneral.Unwrap() before calling this method if this MiningProfitGeneral
// was returned from a transaction, and the transaction was committed or rolled back.
func (mpg *MiningProfitGeneral) Update() *MiningProfitGeneralUpdateOne {
	return (&MiningProfitGeneralClient{config: mpg.config}).UpdateOne(mpg)
}

// Unwrap unwraps the MiningProfitGeneral entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mpg *MiningProfitGeneral) Unwrap() *MiningProfitGeneral {
	_tx, ok := mpg.config.driver.(*txDriver)
	if !ok {
		panic("ent: MiningProfitGeneral is not a transactional entity")
	}
	mpg.config.driver = _tx.drv
	return mpg
}

// String implements the fmt.Stringer.
func (mpg *MiningProfitGeneral) String() string {
	var builder strings.Builder
	builder.WriteString("MiningProfitGeneral(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mpg.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", mpg.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", mpg.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", mpg.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", mpg.GoodID))
	builder.WriteString(", ")
	builder.WriteString("coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", mpg.CoinTypeID))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", mpg.Amount))
	builder.WriteString(", ")
	builder.WriteString("to_platform=")
	builder.WriteString(fmt.Sprintf("%v", mpg.ToPlatform))
	builder.WriteString(", ")
	builder.WriteString("to_user=")
	builder.WriteString(fmt.Sprintf("%v", mpg.ToUser))
	builder.WriteByte(')')
	return builder.String()
}

// MiningProfitGenerals is a parsable slice of MiningProfitGeneral.
type MiningProfitGenerals []*MiningProfitGeneral

func (mpg MiningProfitGenerals) config(cfg config) {
	for _i := range mpg {
		mpg[_i].config = cfg
	}
}
