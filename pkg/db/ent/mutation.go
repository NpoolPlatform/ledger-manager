// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/NpoolPlatform/ledger-manager/pkg/db/ent/detail"
	"github.com/NpoolPlatform/ledger-manager/pkg/db/ent/general"
	"github.com/NpoolPlatform/ledger-manager/pkg/db/ent/miningprofitdetail"
	"github.com/NpoolPlatform/ledger-manager/pkg/db/ent/miningprofitgeneral"
	"github.com/NpoolPlatform/ledger-manager/pkg/db/ent/miningprofitunsold"
	"github.com/NpoolPlatform/ledger-manager/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/ledger-manager/pkg/db/ent/profit"
	"github.com/NpoolPlatform/ledger-manager/pkg/db/ent/withdraw"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDetail              = "Detail"
	TypeGeneral             = "General"
	TypeMiningProfitDetail  = "MiningProfitDetail"
	TypeMiningProfitGeneral = "MiningProfitGeneral"
	TypeMiningProfitUnsold  = "MiningProfitUnsold"
	TypeProfit              = "Profit"
	TypeWithdraw            = "Withdraw"
)

// DetailMutation represents an operation that mutates the Detail nodes in the graph.
type DetailMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	created_at           *uint32
	addcreated_at        *int32
	updated_at           *uint32
	addupdated_at        *int32
	deleted_at           *uint32
	adddeleted_at        *int32
	app_id               *uuid.UUID
	user_id              *uuid.UUID
	coin_type_id         *uuid.UUID
	io_type              *string
	io_sub_type          *string
	amount               *decimal.Decimal
	addamount            *decimal.Decimal
	from_coin_type_id    *uuid.UUID
	coin_usd_currency    *decimal.Decimal
	addcoin_usd_currency *decimal.Decimal
	io_extra             *string
	clearedFields        map[string]struct{}
	done                 bool
	oldValue             func(context.Context) (*Detail, error)
	predicates           []predicate.Detail
}

var _ ent.Mutation = (*DetailMutation)(nil)

// detailOption allows management of the mutation configuration using functional options.
type detailOption func(*DetailMutation)

// newDetailMutation creates new mutation for the Detail entity.
func newDetailMutation(c config, op Op, opts ...detailOption) *DetailMutation {
	m := &DetailMutation{
		config:        c,
		op:            op,
		typ:           TypeDetail,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDetailID sets the ID field of the mutation.
func withDetailID(id uuid.UUID) detailOption {
	return func(m *DetailMutation) {
		var (
			err   error
			once  sync.Once
			value *Detail
		)
		m.oldValue = func(ctx context.Context) (*Detail, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Detail.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDetail sets the old Detail of the mutation.
func withDetail(node *Detail) detailOption {
	return func(m *DetailMutation) {
		m.oldValue = func(context.Context) (*Detail, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DetailMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DetailMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Detail entities.
func (m *DetailMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DetailMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DetailMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Detail.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *DetailMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DetailMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *DetailMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *DetailMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DetailMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DetailMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DetailMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *DetailMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *DetailMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DetailMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *DetailMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *DetailMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *DetailMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *DetailMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *DetailMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *DetailMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *DetailMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *DetailMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[detail.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *DetailMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[detail.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *DetailMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, detail.FieldAppID)
}

// SetUserID sets the "user_id" field.
func (m *DetailMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *DetailMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *DetailMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[detail.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *DetailMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[detail.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *DetailMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, detail.FieldUserID)
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *DetailMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *DetailMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *DetailMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[detail.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *DetailMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[detail.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *DetailMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, detail.FieldCoinTypeID)
}

// SetIoType sets the "io_type" field.
func (m *DetailMutation) SetIoType(s string) {
	m.io_type = &s
}

// IoType returns the value of the "io_type" field in the mutation.
func (m *DetailMutation) IoType() (r string, exists bool) {
	v := m.io_type
	if v == nil {
		return
	}
	return *v, true
}

// OldIoType returns the old "io_type" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldIoType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIoType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIoType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIoType: %w", err)
	}
	return oldValue.IoType, nil
}

// ClearIoType clears the value of the "io_type" field.
func (m *DetailMutation) ClearIoType() {
	m.io_type = nil
	m.clearedFields[detail.FieldIoType] = struct{}{}
}

// IoTypeCleared returns if the "io_type" field was cleared in this mutation.
func (m *DetailMutation) IoTypeCleared() bool {
	_, ok := m.clearedFields[detail.FieldIoType]
	return ok
}

// ResetIoType resets all changes to the "io_type" field.
func (m *DetailMutation) ResetIoType() {
	m.io_type = nil
	delete(m.clearedFields, detail.FieldIoType)
}

// SetIoSubType sets the "io_sub_type" field.
func (m *DetailMutation) SetIoSubType(s string) {
	m.io_sub_type = &s
}

// IoSubType returns the value of the "io_sub_type" field in the mutation.
func (m *DetailMutation) IoSubType() (r string, exists bool) {
	v := m.io_sub_type
	if v == nil {
		return
	}
	return *v, true
}

// OldIoSubType returns the old "io_sub_type" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldIoSubType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIoSubType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIoSubType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIoSubType: %w", err)
	}
	return oldValue.IoSubType, nil
}

// ClearIoSubType clears the value of the "io_sub_type" field.
func (m *DetailMutation) ClearIoSubType() {
	m.io_sub_type = nil
	m.clearedFields[detail.FieldIoSubType] = struct{}{}
}

// IoSubTypeCleared returns if the "io_sub_type" field was cleared in this mutation.
func (m *DetailMutation) IoSubTypeCleared() bool {
	_, ok := m.clearedFields[detail.FieldIoSubType]
	return ok
}

// ResetIoSubType resets all changes to the "io_sub_type" field.
func (m *DetailMutation) ResetIoSubType() {
	m.io_sub_type = nil
	delete(m.clearedFields, detail.FieldIoSubType)
}

// SetAmount sets the "amount" field.
func (m *DetailMutation) SetAmount(d decimal.Decimal) {
	m.amount = &d
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *DetailMutation) Amount() (r decimal.Decimal, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds d to the "amount" field.
func (m *DetailMutation) AddAmount(d decimal.Decimal) {
	if m.addamount != nil {
		*m.addamount = m.addamount.Add(d)
	} else {
		m.addamount = &d
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *DetailMutation) AddedAmount() (r decimal.Decimal, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ClearAmount clears the value of the "amount" field.
func (m *DetailMutation) ClearAmount() {
	m.amount = nil
	m.addamount = nil
	m.clearedFields[detail.FieldAmount] = struct{}{}
}

// AmountCleared returns if the "amount" field was cleared in this mutation.
func (m *DetailMutation) AmountCleared() bool {
	_, ok := m.clearedFields[detail.FieldAmount]
	return ok
}

// ResetAmount resets all changes to the "amount" field.
func (m *DetailMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
	delete(m.clearedFields, detail.FieldAmount)
}

// SetFromCoinTypeID sets the "from_coin_type_id" field.
func (m *DetailMutation) SetFromCoinTypeID(u uuid.UUID) {
	m.from_coin_type_id = &u
}

// FromCoinTypeID returns the value of the "from_coin_type_id" field in the mutation.
func (m *DetailMutation) FromCoinTypeID() (r uuid.UUID, exists bool) {
	v := m.from_coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFromCoinTypeID returns the old "from_coin_type_id" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldFromCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFromCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFromCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFromCoinTypeID: %w", err)
	}
	return oldValue.FromCoinTypeID, nil
}

// ClearFromCoinTypeID clears the value of the "from_coin_type_id" field.
func (m *DetailMutation) ClearFromCoinTypeID() {
	m.from_coin_type_id = nil
	m.clearedFields[detail.FieldFromCoinTypeID] = struct{}{}
}

// FromCoinTypeIDCleared returns if the "from_coin_type_id" field was cleared in this mutation.
func (m *DetailMutation) FromCoinTypeIDCleared() bool {
	_, ok := m.clearedFields[detail.FieldFromCoinTypeID]
	return ok
}

// ResetFromCoinTypeID resets all changes to the "from_coin_type_id" field.
func (m *DetailMutation) ResetFromCoinTypeID() {
	m.from_coin_type_id = nil
	delete(m.clearedFields, detail.FieldFromCoinTypeID)
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (m *DetailMutation) SetCoinUsdCurrency(d decimal.Decimal) {
	m.coin_usd_currency = &d
	m.addcoin_usd_currency = nil
}

// CoinUsdCurrency returns the value of the "coin_usd_currency" field in the mutation.
func (m *DetailMutation) CoinUsdCurrency() (r decimal.Decimal, exists bool) {
	v := m.coin_usd_currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinUsdCurrency returns the old "coin_usd_currency" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldCoinUsdCurrency(ctx context.Context) (v *decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinUsdCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinUsdCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinUsdCurrency: %w", err)
	}
	return oldValue.CoinUsdCurrency, nil
}

// AddCoinUsdCurrency adds d to the "coin_usd_currency" field.
func (m *DetailMutation) AddCoinUsdCurrency(d decimal.Decimal) {
	if m.addcoin_usd_currency != nil {
		*m.addcoin_usd_currency = m.addcoin_usd_currency.Add(d)
	} else {
		m.addcoin_usd_currency = &d
	}
}

// AddedCoinUsdCurrency returns the value that was added to the "coin_usd_currency" field in this mutation.
func (m *DetailMutation) AddedCoinUsdCurrency() (r decimal.Decimal, exists bool) {
	v := m.addcoin_usd_currency
	if v == nil {
		return
	}
	return *v, true
}

// ClearCoinUsdCurrency clears the value of the "coin_usd_currency" field.
func (m *DetailMutation) ClearCoinUsdCurrency() {
	m.coin_usd_currency = nil
	m.addcoin_usd_currency = nil
	m.clearedFields[detail.FieldCoinUsdCurrency] = struct{}{}
}

// CoinUsdCurrencyCleared returns if the "coin_usd_currency" field was cleared in this mutation.
func (m *DetailMutation) CoinUsdCurrencyCleared() bool {
	_, ok := m.clearedFields[detail.FieldCoinUsdCurrency]
	return ok
}

// ResetCoinUsdCurrency resets all changes to the "coin_usd_currency" field.
func (m *DetailMutation) ResetCoinUsdCurrency() {
	m.coin_usd_currency = nil
	m.addcoin_usd_currency = nil
	delete(m.clearedFields, detail.FieldCoinUsdCurrency)
}

// SetIoExtra sets the "io_extra" field.
func (m *DetailMutation) SetIoExtra(s string) {
	m.io_extra = &s
}

// IoExtra returns the value of the "io_extra" field in the mutation.
func (m *DetailMutation) IoExtra() (r string, exists bool) {
	v := m.io_extra
	if v == nil {
		return
	}
	return *v, true
}

// OldIoExtra returns the old "io_extra" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldIoExtra(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIoExtra is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIoExtra requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIoExtra: %w", err)
	}
	return oldValue.IoExtra, nil
}

// ClearIoExtra clears the value of the "io_extra" field.
func (m *DetailMutation) ClearIoExtra() {
	m.io_extra = nil
	m.clearedFields[detail.FieldIoExtra] = struct{}{}
}

// IoExtraCleared returns if the "io_extra" field was cleared in this mutation.
func (m *DetailMutation) IoExtraCleared() bool {
	_, ok := m.clearedFields[detail.FieldIoExtra]
	return ok
}

// ResetIoExtra resets all changes to the "io_extra" field.
func (m *DetailMutation) ResetIoExtra() {
	m.io_extra = nil
	delete(m.clearedFields, detail.FieldIoExtra)
}

// Where appends a list predicates to the DetailMutation builder.
func (m *DetailMutation) Where(ps ...predicate.Detail) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DetailMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Detail).
func (m *DetailMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DetailMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.created_at != nil {
		fields = append(fields, detail.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, detail.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, detail.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, detail.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, detail.FieldUserID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, detail.FieldCoinTypeID)
	}
	if m.io_type != nil {
		fields = append(fields, detail.FieldIoType)
	}
	if m.io_sub_type != nil {
		fields = append(fields, detail.FieldIoSubType)
	}
	if m.amount != nil {
		fields = append(fields, detail.FieldAmount)
	}
	if m.from_coin_type_id != nil {
		fields = append(fields, detail.FieldFromCoinTypeID)
	}
	if m.coin_usd_currency != nil {
		fields = append(fields, detail.FieldCoinUsdCurrency)
	}
	if m.io_extra != nil {
		fields = append(fields, detail.FieldIoExtra)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DetailMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case detail.FieldCreatedAt:
		return m.CreatedAt()
	case detail.FieldUpdatedAt:
		return m.UpdatedAt()
	case detail.FieldDeletedAt:
		return m.DeletedAt()
	case detail.FieldAppID:
		return m.AppID()
	case detail.FieldUserID:
		return m.UserID()
	case detail.FieldCoinTypeID:
		return m.CoinTypeID()
	case detail.FieldIoType:
		return m.IoType()
	case detail.FieldIoSubType:
		return m.IoSubType()
	case detail.FieldAmount:
		return m.Amount()
	case detail.FieldFromCoinTypeID:
		return m.FromCoinTypeID()
	case detail.FieldCoinUsdCurrency:
		return m.CoinUsdCurrency()
	case detail.FieldIoExtra:
		return m.IoExtra()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DetailMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case detail.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case detail.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case detail.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case detail.FieldAppID:
		return m.OldAppID(ctx)
	case detail.FieldUserID:
		return m.OldUserID(ctx)
	case detail.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case detail.FieldIoType:
		return m.OldIoType(ctx)
	case detail.FieldIoSubType:
		return m.OldIoSubType(ctx)
	case detail.FieldAmount:
		return m.OldAmount(ctx)
	case detail.FieldFromCoinTypeID:
		return m.OldFromCoinTypeID(ctx)
	case detail.FieldCoinUsdCurrency:
		return m.OldCoinUsdCurrency(ctx)
	case detail.FieldIoExtra:
		return m.OldIoExtra(ctx)
	}
	return nil, fmt.Errorf("unknown Detail field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DetailMutation) SetField(name string, value ent.Value) error {
	switch name {
	case detail.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case detail.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case detail.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case detail.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case detail.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case detail.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case detail.FieldIoType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIoType(v)
		return nil
	case detail.FieldIoSubType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIoSubType(v)
		return nil
	case detail.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case detail.FieldFromCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFromCoinTypeID(v)
		return nil
	case detail.FieldCoinUsdCurrency:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinUsdCurrency(v)
		return nil
	case detail.FieldIoExtra:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIoExtra(v)
		return nil
	}
	return fmt.Errorf("unknown Detail field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DetailMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, detail.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, detail.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, detail.FieldDeletedAt)
	}
	if m.addamount != nil {
		fields = append(fields, detail.FieldAmount)
	}
	if m.addcoin_usd_currency != nil {
		fields = append(fields, detail.FieldCoinUsdCurrency)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DetailMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case detail.FieldCreatedAt:
		return m.AddedCreatedAt()
	case detail.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case detail.FieldDeletedAt:
		return m.AddedDeletedAt()
	case detail.FieldAmount:
		return m.AddedAmount()
	case detail.FieldCoinUsdCurrency:
		return m.AddedCoinUsdCurrency()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DetailMutation) AddField(name string, value ent.Value) error {
	switch name {
	case detail.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case detail.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case detail.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case detail.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case detail.FieldCoinUsdCurrency:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCoinUsdCurrency(v)
		return nil
	}
	return fmt.Errorf("unknown Detail numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DetailMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(detail.FieldAppID) {
		fields = append(fields, detail.FieldAppID)
	}
	if m.FieldCleared(detail.FieldUserID) {
		fields = append(fields, detail.FieldUserID)
	}
	if m.FieldCleared(detail.FieldCoinTypeID) {
		fields = append(fields, detail.FieldCoinTypeID)
	}
	if m.FieldCleared(detail.FieldIoType) {
		fields = append(fields, detail.FieldIoType)
	}
	if m.FieldCleared(detail.FieldIoSubType) {
		fields = append(fields, detail.FieldIoSubType)
	}
	if m.FieldCleared(detail.FieldAmount) {
		fields = append(fields, detail.FieldAmount)
	}
	if m.FieldCleared(detail.FieldFromCoinTypeID) {
		fields = append(fields, detail.FieldFromCoinTypeID)
	}
	if m.FieldCleared(detail.FieldCoinUsdCurrency) {
		fields = append(fields, detail.FieldCoinUsdCurrency)
	}
	if m.FieldCleared(detail.FieldIoExtra) {
		fields = append(fields, detail.FieldIoExtra)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DetailMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DetailMutation) ClearField(name string) error {
	switch name {
	case detail.FieldAppID:
		m.ClearAppID()
		return nil
	case detail.FieldUserID:
		m.ClearUserID()
		return nil
	case detail.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case detail.FieldIoType:
		m.ClearIoType()
		return nil
	case detail.FieldIoSubType:
		m.ClearIoSubType()
		return nil
	case detail.FieldAmount:
		m.ClearAmount()
		return nil
	case detail.FieldFromCoinTypeID:
		m.ClearFromCoinTypeID()
		return nil
	case detail.FieldCoinUsdCurrency:
		m.ClearCoinUsdCurrency()
		return nil
	case detail.FieldIoExtra:
		m.ClearIoExtra()
		return nil
	}
	return fmt.Errorf("unknown Detail nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DetailMutation) ResetField(name string) error {
	switch name {
	case detail.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case detail.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case detail.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case detail.FieldAppID:
		m.ResetAppID()
		return nil
	case detail.FieldUserID:
		m.ResetUserID()
		return nil
	case detail.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case detail.FieldIoType:
		m.ResetIoType()
		return nil
	case detail.FieldIoSubType:
		m.ResetIoSubType()
		return nil
	case detail.FieldAmount:
		m.ResetAmount()
		return nil
	case detail.FieldFromCoinTypeID:
		m.ResetFromCoinTypeID()
		return nil
	case detail.FieldCoinUsdCurrency:
		m.ResetCoinUsdCurrency()
		return nil
	case detail.FieldIoExtra:
		m.ResetIoExtra()
		return nil
	}
	return fmt.Errorf("unknown Detail field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DetailMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DetailMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DetailMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DetailMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DetailMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DetailMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DetailMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Detail unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DetailMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Detail edge %s", name)
}

// GeneralMutation represents an operation that mutates the General nodes in the graph.
type GeneralMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	app_id        *uuid.UUID
	user_id       *uuid.UUID
	coin_type_id  *uuid.UUID
	incoming      *decimal.Decimal
	addincoming   *decimal.Decimal
	locked        *decimal.Decimal
	addlocked     *decimal.Decimal
	outcoming     *decimal.Decimal
	addoutcoming  *decimal.Decimal
	spendable     *decimal.Decimal
	addspendable  *decimal.Decimal
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*General, error)
	predicates    []predicate.General
}

var _ ent.Mutation = (*GeneralMutation)(nil)

// generalOption allows management of the mutation configuration using functional options.
type generalOption func(*GeneralMutation)

// newGeneralMutation creates new mutation for the General entity.
func newGeneralMutation(c config, op Op, opts ...generalOption) *GeneralMutation {
	m := &GeneralMutation{
		config:        c,
		op:            op,
		typ:           TypeGeneral,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGeneralID sets the ID field of the mutation.
func withGeneralID(id uuid.UUID) generalOption {
	return func(m *GeneralMutation) {
		var (
			err   error
			once  sync.Once
			value *General
		)
		m.oldValue = func(ctx context.Context) (*General, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().General.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGeneral sets the old General of the mutation.
func withGeneral(node *General) generalOption {
	return func(m *GeneralMutation) {
		m.oldValue = func(context.Context) (*General, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GeneralMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GeneralMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of General entities.
func (m *GeneralMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GeneralMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GeneralMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().General.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *GeneralMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GeneralMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the General entity.
// If the General object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneralMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *GeneralMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *GeneralMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GeneralMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GeneralMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GeneralMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the General entity.
// If the General object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneralMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *GeneralMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *GeneralMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GeneralMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *GeneralMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *GeneralMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the General entity.
// If the General object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneralMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *GeneralMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *GeneralMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *GeneralMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *GeneralMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *GeneralMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the General entity.
// If the General object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneralMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *GeneralMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[general.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *GeneralMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[general.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *GeneralMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, general.FieldAppID)
}

// SetUserID sets the "user_id" field.
func (m *GeneralMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *GeneralMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the General entity.
// If the General object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneralMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *GeneralMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[general.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *GeneralMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[general.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *GeneralMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, general.FieldUserID)
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *GeneralMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *GeneralMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the General entity.
// If the General object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneralMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *GeneralMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[general.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *GeneralMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[general.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *GeneralMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, general.FieldCoinTypeID)
}

// SetIncoming sets the "incoming" field.
func (m *GeneralMutation) SetIncoming(d decimal.Decimal) {
	m.incoming = &d
	m.addincoming = nil
}

// Incoming returns the value of the "incoming" field in the mutation.
func (m *GeneralMutation) Incoming() (r decimal.Decimal, exists bool) {
	v := m.incoming
	if v == nil {
		return
	}
	return *v, true
}

// OldIncoming returns the old "incoming" field's value of the General entity.
// If the General object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneralMutation) OldIncoming(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIncoming is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIncoming requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIncoming: %w", err)
	}
	return oldValue.Incoming, nil
}

// AddIncoming adds d to the "incoming" field.
func (m *GeneralMutation) AddIncoming(d decimal.Decimal) {
	if m.addincoming != nil {
		*m.addincoming = m.addincoming.Add(d)
	} else {
		m.addincoming = &d
	}
}

// AddedIncoming returns the value that was added to the "incoming" field in this mutation.
func (m *GeneralMutation) AddedIncoming() (r decimal.Decimal, exists bool) {
	v := m.addincoming
	if v == nil {
		return
	}
	return *v, true
}

// ClearIncoming clears the value of the "incoming" field.
func (m *GeneralMutation) ClearIncoming() {
	m.incoming = nil
	m.addincoming = nil
	m.clearedFields[general.FieldIncoming] = struct{}{}
}

// IncomingCleared returns if the "incoming" field was cleared in this mutation.
func (m *GeneralMutation) IncomingCleared() bool {
	_, ok := m.clearedFields[general.FieldIncoming]
	return ok
}

// ResetIncoming resets all changes to the "incoming" field.
func (m *GeneralMutation) ResetIncoming() {
	m.incoming = nil
	m.addincoming = nil
	delete(m.clearedFields, general.FieldIncoming)
}

// SetLocked sets the "locked" field.
func (m *GeneralMutation) SetLocked(d decimal.Decimal) {
	m.locked = &d
	m.addlocked = nil
}

// Locked returns the value of the "locked" field in the mutation.
func (m *GeneralMutation) Locked() (r decimal.Decimal, exists bool) {
	v := m.locked
	if v == nil {
		return
	}
	return *v, true
}

// OldLocked returns the old "locked" field's value of the General entity.
// If the General object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneralMutation) OldLocked(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocked is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocked requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocked: %w", err)
	}
	return oldValue.Locked, nil
}

// AddLocked adds d to the "locked" field.
func (m *GeneralMutation) AddLocked(d decimal.Decimal) {
	if m.addlocked != nil {
		*m.addlocked = m.addlocked.Add(d)
	} else {
		m.addlocked = &d
	}
}

// AddedLocked returns the value that was added to the "locked" field in this mutation.
func (m *GeneralMutation) AddedLocked() (r decimal.Decimal, exists bool) {
	v := m.addlocked
	if v == nil {
		return
	}
	return *v, true
}

// ClearLocked clears the value of the "locked" field.
func (m *GeneralMutation) ClearLocked() {
	m.locked = nil
	m.addlocked = nil
	m.clearedFields[general.FieldLocked] = struct{}{}
}

// LockedCleared returns if the "locked" field was cleared in this mutation.
func (m *GeneralMutation) LockedCleared() bool {
	_, ok := m.clearedFields[general.FieldLocked]
	return ok
}

// ResetLocked resets all changes to the "locked" field.
func (m *GeneralMutation) ResetLocked() {
	m.locked = nil
	m.addlocked = nil
	delete(m.clearedFields, general.FieldLocked)
}

// SetOutcoming sets the "outcoming" field.
func (m *GeneralMutation) SetOutcoming(d decimal.Decimal) {
	m.outcoming = &d
	m.addoutcoming = nil
}

// Outcoming returns the value of the "outcoming" field in the mutation.
func (m *GeneralMutation) Outcoming() (r decimal.Decimal, exists bool) {
	v := m.outcoming
	if v == nil {
		return
	}
	return *v, true
}

// OldOutcoming returns the old "outcoming" field's value of the General entity.
// If the General object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneralMutation) OldOutcoming(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOutcoming is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOutcoming requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOutcoming: %w", err)
	}
	return oldValue.Outcoming, nil
}

// AddOutcoming adds d to the "outcoming" field.
func (m *GeneralMutation) AddOutcoming(d decimal.Decimal) {
	if m.addoutcoming != nil {
		*m.addoutcoming = m.addoutcoming.Add(d)
	} else {
		m.addoutcoming = &d
	}
}

// AddedOutcoming returns the value that was added to the "outcoming" field in this mutation.
func (m *GeneralMutation) AddedOutcoming() (r decimal.Decimal, exists bool) {
	v := m.addoutcoming
	if v == nil {
		return
	}
	return *v, true
}

// ClearOutcoming clears the value of the "outcoming" field.
func (m *GeneralMutation) ClearOutcoming() {
	m.outcoming = nil
	m.addoutcoming = nil
	m.clearedFields[general.FieldOutcoming] = struct{}{}
}

// OutcomingCleared returns if the "outcoming" field was cleared in this mutation.
func (m *GeneralMutation) OutcomingCleared() bool {
	_, ok := m.clearedFields[general.FieldOutcoming]
	return ok
}

// ResetOutcoming resets all changes to the "outcoming" field.
func (m *GeneralMutation) ResetOutcoming() {
	m.outcoming = nil
	m.addoutcoming = nil
	delete(m.clearedFields, general.FieldOutcoming)
}

// SetSpendable sets the "spendable" field.
func (m *GeneralMutation) SetSpendable(d decimal.Decimal) {
	m.spendable = &d
	m.addspendable = nil
}

// Spendable returns the value of the "spendable" field in the mutation.
func (m *GeneralMutation) Spendable() (r decimal.Decimal, exists bool) {
	v := m.spendable
	if v == nil {
		return
	}
	return *v, true
}

// OldSpendable returns the old "spendable" field's value of the General entity.
// If the General object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneralMutation) OldSpendable(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpendable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpendable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpendable: %w", err)
	}
	return oldValue.Spendable, nil
}

// AddSpendable adds d to the "spendable" field.
func (m *GeneralMutation) AddSpendable(d decimal.Decimal) {
	if m.addspendable != nil {
		*m.addspendable = m.addspendable.Add(d)
	} else {
		m.addspendable = &d
	}
}

// AddedSpendable returns the value that was added to the "spendable" field in this mutation.
func (m *GeneralMutation) AddedSpendable() (r decimal.Decimal, exists bool) {
	v := m.addspendable
	if v == nil {
		return
	}
	return *v, true
}

// ClearSpendable clears the value of the "spendable" field.
func (m *GeneralMutation) ClearSpendable() {
	m.spendable = nil
	m.addspendable = nil
	m.clearedFields[general.FieldSpendable] = struct{}{}
}

// SpendableCleared returns if the "spendable" field was cleared in this mutation.
func (m *GeneralMutation) SpendableCleared() bool {
	_, ok := m.clearedFields[general.FieldSpendable]
	return ok
}

// ResetSpendable resets all changes to the "spendable" field.
func (m *GeneralMutation) ResetSpendable() {
	m.spendable = nil
	m.addspendable = nil
	delete(m.clearedFields, general.FieldSpendable)
}

// Where appends a list predicates to the GeneralMutation builder.
func (m *GeneralMutation) Where(ps ...predicate.General) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GeneralMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (General).
func (m *GeneralMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GeneralMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, general.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, general.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, general.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, general.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, general.FieldUserID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, general.FieldCoinTypeID)
	}
	if m.incoming != nil {
		fields = append(fields, general.FieldIncoming)
	}
	if m.locked != nil {
		fields = append(fields, general.FieldLocked)
	}
	if m.outcoming != nil {
		fields = append(fields, general.FieldOutcoming)
	}
	if m.spendable != nil {
		fields = append(fields, general.FieldSpendable)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GeneralMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case general.FieldCreatedAt:
		return m.CreatedAt()
	case general.FieldUpdatedAt:
		return m.UpdatedAt()
	case general.FieldDeletedAt:
		return m.DeletedAt()
	case general.FieldAppID:
		return m.AppID()
	case general.FieldUserID:
		return m.UserID()
	case general.FieldCoinTypeID:
		return m.CoinTypeID()
	case general.FieldIncoming:
		return m.Incoming()
	case general.FieldLocked:
		return m.Locked()
	case general.FieldOutcoming:
		return m.Outcoming()
	case general.FieldSpendable:
		return m.Spendable()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GeneralMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case general.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case general.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case general.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case general.FieldAppID:
		return m.OldAppID(ctx)
	case general.FieldUserID:
		return m.OldUserID(ctx)
	case general.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case general.FieldIncoming:
		return m.OldIncoming(ctx)
	case general.FieldLocked:
		return m.OldLocked(ctx)
	case general.FieldOutcoming:
		return m.OldOutcoming(ctx)
	case general.FieldSpendable:
		return m.OldSpendable(ctx)
	}
	return nil, fmt.Errorf("unknown General field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GeneralMutation) SetField(name string, value ent.Value) error {
	switch name {
	case general.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case general.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case general.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case general.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case general.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case general.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case general.FieldIncoming:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIncoming(v)
		return nil
	case general.FieldLocked:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocked(v)
		return nil
	case general.FieldOutcoming:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOutcoming(v)
		return nil
	case general.FieldSpendable:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpendable(v)
		return nil
	}
	return fmt.Errorf("unknown General field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GeneralMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, general.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, general.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, general.FieldDeletedAt)
	}
	if m.addincoming != nil {
		fields = append(fields, general.FieldIncoming)
	}
	if m.addlocked != nil {
		fields = append(fields, general.FieldLocked)
	}
	if m.addoutcoming != nil {
		fields = append(fields, general.FieldOutcoming)
	}
	if m.addspendable != nil {
		fields = append(fields, general.FieldSpendable)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GeneralMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case general.FieldCreatedAt:
		return m.AddedCreatedAt()
	case general.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case general.FieldDeletedAt:
		return m.AddedDeletedAt()
	case general.FieldIncoming:
		return m.AddedIncoming()
	case general.FieldLocked:
		return m.AddedLocked()
	case general.FieldOutcoming:
		return m.AddedOutcoming()
	case general.FieldSpendable:
		return m.AddedSpendable()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GeneralMutation) AddField(name string, value ent.Value) error {
	switch name {
	case general.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case general.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case general.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case general.FieldIncoming:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIncoming(v)
		return nil
	case general.FieldLocked:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLocked(v)
		return nil
	case general.FieldOutcoming:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOutcoming(v)
		return nil
	case general.FieldSpendable:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSpendable(v)
		return nil
	}
	return fmt.Errorf("unknown General numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GeneralMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(general.FieldAppID) {
		fields = append(fields, general.FieldAppID)
	}
	if m.FieldCleared(general.FieldUserID) {
		fields = append(fields, general.FieldUserID)
	}
	if m.FieldCleared(general.FieldCoinTypeID) {
		fields = append(fields, general.FieldCoinTypeID)
	}
	if m.FieldCleared(general.FieldIncoming) {
		fields = append(fields, general.FieldIncoming)
	}
	if m.FieldCleared(general.FieldLocked) {
		fields = append(fields, general.FieldLocked)
	}
	if m.FieldCleared(general.FieldOutcoming) {
		fields = append(fields, general.FieldOutcoming)
	}
	if m.FieldCleared(general.FieldSpendable) {
		fields = append(fields, general.FieldSpendable)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GeneralMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GeneralMutation) ClearField(name string) error {
	switch name {
	case general.FieldAppID:
		m.ClearAppID()
		return nil
	case general.FieldUserID:
		m.ClearUserID()
		return nil
	case general.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case general.FieldIncoming:
		m.ClearIncoming()
		return nil
	case general.FieldLocked:
		m.ClearLocked()
		return nil
	case general.FieldOutcoming:
		m.ClearOutcoming()
		return nil
	case general.FieldSpendable:
		m.ClearSpendable()
		return nil
	}
	return fmt.Errorf("unknown General nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GeneralMutation) ResetField(name string) error {
	switch name {
	case general.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case general.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case general.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case general.FieldAppID:
		m.ResetAppID()
		return nil
	case general.FieldUserID:
		m.ResetUserID()
		return nil
	case general.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case general.FieldIncoming:
		m.ResetIncoming()
		return nil
	case general.FieldLocked:
		m.ResetLocked()
		return nil
	case general.FieldOutcoming:
		m.ResetOutcoming()
		return nil
	case general.FieldSpendable:
		m.ResetSpendable()
		return nil
	}
	return fmt.Errorf("unknown General field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GeneralMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GeneralMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GeneralMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GeneralMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GeneralMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GeneralMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GeneralMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown General unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GeneralMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown General edge %s", name)
}

// MiningProfitDetailMutation represents an operation that mutates the MiningProfitDetail nodes in the graph.
type MiningProfitDetailMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	created_at      *uint32
	addcreated_at   *int32
	updated_at      *uint32
	addupdated_at   *int32
	deleted_at      *uint32
	adddeleted_at   *int32
	good_id         *uuid.UUID
	coin_type_id    *uuid.UUID
	amount          *decimal.Decimal
	addamount       *decimal.Decimal
	benefit_date    *uint32
	addbenefit_date *int32
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*MiningProfitDetail, error)
	predicates      []predicate.MiningProfitDetail
}

var _ ent.Mutation = (*MiningProfitDetailMutation)(nil)

// miningprofitdetailOption allows management of the mutation configuration using functional options.
type miningprofitdetailOption func(*MiningProfitDetailMutation)

// newMiningProfitDetailMutation creates new mutation for the MiningProfitDetail entity.
func newMiningProfitDetailMutation(c config, op Op, opts ...miningprofitdetailOption) *MiningProfitDetailMutation {
	m := &MiningProfitDetailMutation{
		config:        c,
		op:            op,
		typ:           TypeMiningProfitDetail,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMiningProfitDetailID sets the ID field of the mutation.
func withMiningProfitDetailID(id uuid.UUID) miningprofitdetailOption {
	return func(m *MiningProfitDetailMutation) {
		var (
			err   error
			once  sync.Once
			value *MiningProfitDetail
		)
		m.oldValue = func(ctx context.Context) (*MiningProfitDetail, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MiningProfitDetail.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMiningProfitDetail sets the old MiningProfitDetail of the mutation.
func withMiningProfitDetail(node *MiningProfitDetail) miningprofitdetailOption {
	return func(m *MiningProfitDetailMutation) {
		m.oldValue = func(context.Context) (*MiningProfitDetail, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MiningProfitDetailMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MiningProfitDetailMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of MiningProfitDetail entities.
func (m *MiningProfitDetailMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MiningProfitDetailMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MiningProfitDetailMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MiningProfitDetail.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *MiningProfitDetailMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MiningProfitDetailMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the MiningProfitDetail entity.
// If the MiningProfitDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MiningProfitDetailMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *MiningProfitDetailMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *MiningProfitDetailMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MiningProfitDetailMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MiningProfitDetailMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MiningProfitDetailMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the MiningProfitDetail entity.
// If the MiningProfitDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MiningProfitDetailMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *MiningProfitDetailMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *MiningProfitDetailMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MiningProfitDetailMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *MiningProfitDetailMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *MiningProfitDetailMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the MiningProfitDetail entity.
// If the MiningProfitDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MiningProfitDetailMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *MiningProfitDetailMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *MiningProfitDetailMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *MiningProfitDetailMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetGoodID sets the "good_id" field.
func (m *MiningProfitDetailMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *MiningProfitDetailMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the MiningProfitDetail entity.
// If the MiningProfitDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MiningProfitDetailMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ClearGoodID clears the value of the "good_id" field.
func (m *MiningProfitDetailMutation) ClearGoodID() {
	m.good_id = nil
	m.clearedFields[miningprofitdetail.FieldGoodID] = struct{}{}
}

// GoodIDCleared returns if the "good_id" field was cleared in this mutation.
func (m *MiningProfitDetailMutation) GoodIDCleared() bool {
	_, ok := m.clearedFields[miningprofitdetail.FieldGoodID]
	return ok
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *MiningProfitDetailMutation) ResetGoodID() {
	m.good_id = nil
	delete(m.clearedFields, miningprofitdetail.FieldGoodID)
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *MiningProfitDetailMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *MiningProfitDetailMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the MiningProfitDetail entity.
// If the MiningProfitDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MiningProfitDetailMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *MiningProfitDetailMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[miningprofitdetail.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *MiningProfitDetailMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[miningprofitdetail.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *MiningProfitDetailMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, miningprofitdetail.FieldCoinTypeID)
}

// SetAmount sets the "amount" field.
func (m *MiningProfitDetailMutation) SetAmount(d decimal.Decimal) {
	m.amount = &d
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *MiningProfitDetailMutation) Amount() (r decimal.Decimal, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the MiningProfitDetail entity.
// If the MiningProfitDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MiningProfitDetailMutation) OldAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds d to the "amount" field.
func (m *MiningProfitDetailMutation) AddAmount(d decimal.Decimal) {
	if m.addamount != nil {
		*m.addamount = m.addamount.Add(d)
	} else {
		m.addamount = &d
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *MiningProfitDetailMutation) AddedAmount() (r decimal.Decimal, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ClearAmount clears the value of the "amount" field.
func (m *MiningProfitDetailMutation) ClearAmount() {
	m.amount = nil
	m.addamount = nil
	m.clearedFields[miningprofitdetail.FieldAmount] = struct{}{}
}

// AmountCleared returns if the "amount" field was cleared in this mutation.
func (m *MiningProfitDetailMutation) AmountCleared() bool {
	_, ok := m.clearedFields[miningprofitdetail.FieldAmount]
	return ok
}

// ResetAmount resets all changes to the "amount" field.
func (m *MiningProfitDetailMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
	delete(m.clearedFields, miningprofitdetail.FieldAmount)
}

// SetBenefitDate sets the "benefit_date" field.
func (m *MiningProfitDetailMutation) SetBenefitDate(u uint32) {
	m.benefit_date = &u
	m.addbenefit_date = nil
}

// BenefitDate returns the value of the "benefit_date" field in the mutation.
func (m *MiningProfitDetailMutation) BenefitDate() (r uint32, exists bool) {
	v := m.benefit_date
	if v == nil {
		return
	}
	return *v, true
}

// OldBenefitDate returns the old "benefit_date" field's value of the MiningProfitDetail entity.
// If the MiningProfitDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MiningProfitDetailMutation) OldBenefitDate(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBenefitDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBenefitDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBenefitDate: %w", err)
	}
	return oldValue.BenefitDate, nil
}

// AddBenefitDate adds u to the "benefit_date" field.
func (m *MiningProfitDetailMutation) AddBenefitDate(u int32) {
	if m.addbenefit_date != nil {
		*m.addbenefit_date += u
	} else {
		m.addbenefit_date = &u
	}
}

// AddedBenefitDate returns the value that was added to the "benefit_date" field in this mutation.
func (m *MiningProfitDetailMutation) AddedBenefitDate() (r int32, exists bool) {
	v := m.addbenefit_date
	if v == nil {
		return
	}
	return *v, true
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (m *MiningProfitDetailMutation) ClearBenefitDate() {
	m.benefit_date = nil
	m.addbenefit_date = nil
	m.clearedFields[miningprofitdetail.FieldBenefitDate] = struct{}{}
}

// BenefitDateCleared returns if the "benefit_date" field was cleared in this mutation.
func (m *MiningProfitDetailMutation) BenefitDateCleared() bool {
	_, ok := m.clearedFields[miningprofitdetail.FieldBenefitDate]
	return ok
}

// ResetBenefitDate resets all changes to the "benefit_date" field.
func (m *MiningProfitDetailMutation) ResetBenefitDate() {
	m.benefit_date = nil
	m.addbenefit_date = nil
	delete(m.clearedFields, miningprofitdetail.FieldBenefitDate)
}

// Where appends a list predicates to the MiningProfitDetailMutation builder.
func (m *MiningProfitDetailMutation) Where(ps ...predicate.MiningProfitDetail) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MiningProfitDetailMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (MiningProfitDetail).
func (m *MiningProfitDetailMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MiningProfitDetailMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, miningprofitdetail.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, miningprofitdetail.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, miningprofitdetail.FieldDeletedAt)
	}
	if m.good_id != nil {
		fields = append(fields, miningprofitdetail.FieldGoodID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, miningprofitdetail.FieldCoinTypeID)
	}
	if m.amount != nil {
		fields = append(fields, miningprofitdetail.FieldAmount)
	}
	if m.benefit_date != nil {
		fields = append(fields, miningprofitdetail.FieldBenefitDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MiningProfitDetailMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case miningprofitdetail.FieldCreatedAt:
		return m.CreatedAt()
	case miningprofitdetail.FieldUpdatedAt:
		return m.UpdatedAt()
	case miningprofitdetail.FieldDeletedAt:
		return m.DeletedAt()
	case miningprofitdetail.FieldGoodID:
		return m.GoodID()
	case miningprofitdetail.FieldCoinTypeID:
		return m.CoinTypeID()
	case miningprofitdetail.FieldAmount:
		return m.Amount()
	case miningprofitdetail.FieldBenefitDate:
		return m.BenefitDate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MiningProfitDetailMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case miningprofitdetail.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case miningprofitdetail.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case miningprofitdetail.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case miningprofitdetail.FieldGoodID:
		return m.OldGoodID(ctx)
	case miningprofitdetail.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case miningprofitdetail.FieldAmount:
		return m.OldAmount(ctx)
	case miningprofitdetail.FieldBenefitDate:
		return m.OldBenefitDate(ctx)
	}
	return nil, fmt.Errorf("unknown MiningProfitDetail field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MiningProfitDetailMutation) SetField(name string, value ent.Value) error {
	switch name {
	case miningprofitdetail.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case miningprofitdetail.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case miningprofitdetail.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case miningprofitdetail.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case miningprofitdetail.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case miningprofitdetail.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case miningprofitdetail.FieldBenefitDate:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBenefitDate(v)
		return nil
	}
	return fmt.Errorf("unknown MiningProfitDetail field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MiningProfitDetailMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, miningprofitdetail.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, miningprofitdetail.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, miningprofitdetail.FieldDeletedAt)
	}
	if m.addamount != nil {
		fields = append(fields, miningprofitdetail.FieldAmount)
	}
	if m.addbenefit_date != nil {
		fields = append(fields, miningprofitdetail.FieldBenefitDate)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MiningProfitDetailMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case miningprofitdetail.FieldCreatedAt:
		return m.AddedCreatedAt()
	case miningprofitdetail.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case miningprofitdetail.FieldDeletedAt:
		return m.AddedDeletedAt()
	case miningprofitdetail.FieldAmount:
		return m.AddedAmount()
	case miningprofitdetail.FieldBenefitDate:
		return m.AddedBenefitDate()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MiningProfitDetailMutation) AddField(name string, value ent.Value) error {
	switch name {
	case miningprofitdetail.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case miningprofitdetail.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case miningprofitdetail.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case miningprofitdetail.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case miningprofitdetail.FieldBenefitDate:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBenefitDate(v)
		return nil
	}
	return fmt.Errorf("unknown MiningProfitDetail numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MiningProfitDetailMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(miningprofitdetail.FieldGoodID) {
		fields = append(fields, miningprofitdetail.FieldGoodID)
	}
	if m.FieldCleared(miningprofitdetail.FieldCoinTypeID) {
		fields = append(fields, miningprofitdetail.FieldCoinTypeID)
	}
	if m.FieldCleared(miningprofitdetail.FieldAmount) {
		fields = append(fields, miningprofitdetail.FieldAmount)
	}
	if m.FieldCleared(miningprofitdetail.FieldBenefitDate) {
		fields = append(fields, miningprofitdetail.FieldBenefitDate)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MiningProfitDetailMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MiningProfitDetailMutation) ClearField(name string) error {
	switch name {
	case miningprofitdetail.FieldGoodID:
		m.ClearGoodID()
		return nil
	case miningprofitdetail.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case miningprofitdetail.FieldAmount:
		m.ClearAmount()
		return nil
	case miningprofitdetail.FieldBenefitDate:
		m.ClearBenefitDate()
		return nil
	}
	return fmt.Errorf("unknown MiningProfitDetail nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MiningProfitDetailMutation) ResetField(name string) error {
	switch name {
	case miningprofitdetail.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case miningprofitdetail.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case miningprofitdetail.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case miningprofitdetail.FieldGoodID:
		m.ResetGoodID()
		return nil
	case miningprofitdetail.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case miningprofitdetail.FieldAmount:
		m.ResetAmount()
		return nil
	case miningprofitdetail.FieldBenefitDate:
		m.ResetBenefitDate()
		return nil
	}
	return fmt.Errorf("unknown MiningProfitDetail field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MiningProfitDetailMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MiningProfitDetailMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MiningProfitDetailMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MiningProfitDetailMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MiningProfitDetailMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MiningProfitDetailMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MiningProfitDetailMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MiningProfitDetail unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MiningProfitDetailMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MiningProfitDetail edge %s", name)
}

// MiningProfitGeneralMutation represents an operation that mutates the MiningProfitGeneral nodes in the graph.
type MiningProfitGeneralMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	created_at     *uint32
	addcreated_at  *int32
	updated_at     *uint32
	addupdated_at  *int32
	deleted_at     *uint32
	adddeleted_at  *int32
	good_id        *uuid.UUID
	coin_type_id   *uuid.UUID
	amount         *decimal.Decimal
	addamount      *decimal.Decimal
	to_platform    *decimal.Decimal
	addto_platform *decimal.Decimal
	to_user        *decimal.Decimal
	addto_user     *decimal.Decimal
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*MiningProfitGeneral, error)
	predicates     []predicate.MiningProfitGeneral
}

var _ ent.Mutation = (*MiningProfitGeneralMutation)(nil)

// miningprofitgeneralOption allows management of the mutation configuration using functional options.
type miningprofitgeneralOption func(*MiningProfitGeneralMutation)

// newMiningProfitGeneralMutation creates new mutation for the MiningProfitGeneral entity.
func newMiningProfitGeneralMutation(c config, op Op, opts ...miningprofitgeneralOption) *MiningProfitGeneralMutation {
	m := &MiningProfitGeneralMutation{
		config:        c,
		op:            op,
		typ:           TypeMiningProfitGeneral,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMiningProfitGeneralID sets the ID field of the mutation.
func withMiningProfitGeneralID(id uuid.UUID) miningprofitgeneralOption {
	return func(m *MiningProfitGeneralMutation) {
		var (
			err   error
			once  sync.Once
			value *MiningProfitGeneral
		)
		m.oldValue = func(ctx context.Context) (*MiningProfitGeneral, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MiningProfitGeneral.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMiningProfitGeneral sets the old MiningProfitGeneral of the mutation.
func withMiningProfitGeneral(node *MiningProfitGeneral) miningprofitgeneralOption {
	return func(m *MiningProfitGeneralMutation) {
		m.oldValue = func(context.Context) (*MiningProfitGeneral, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MiningProfitGeneralMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MiningProfitGeneralMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of MiningProfitGeneral entities.
func (m *MiningProfitGeneralMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MiningProfitGeneralMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MiningProfitGeneralMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MiningProfitGeneral.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *MiningProfitGeneralMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MiningProfitGeneralMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the MiningProfitGeneral entity.
// If the MiningProfitGeneral object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MiningProfitGeneralMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *MiningProfitGeneralMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *MiningProfitGeneralMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MiningProfitGeneralMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MiningProfitGeneralMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MiningProfitGeneralMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the MiningProfitGeneral entity.
// If the MiningProfitGeneral object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MiningProfitGeneralMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *MiningProfitGeneralMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *MiningProfitGeneralMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MiningProfitGeneralMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *MiningProfitGeneralMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *MiningProfitGeneralMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the MiningProfitGeneral entity.
// If the MiningProfitGeneral object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MiningProfitGeneralMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *MiningProfitGeneralMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *MiningProfitGeneralMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *MiningProfitGeneralMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetGoodID sets the "good_id" field.
func (m *MiningProfitGeneralMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *MiningProfitGeneralMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the MiningProfitGeneral entity.
// If the MiningProfitGeneral object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MiningProfitGeneralMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ClearGoodID clears the value of the "good_id" field.
func (m *MiningProfitGeneralMutation) ClearGoodID() {
	m.good_id = nil
	m.clearedFields[miningprofitgeneral.FieldGoodID] = struct{}{}
}

// GoodIDCleared returns if the "good_id" field was cleared in this mutation.
func (m *MiningProfitGeneralMutation) GoodIDCleared() bool {
	_, ok := m.clearedFields[miningprofitgeneral.FieldGoodID]
	return ok
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *MiningProfitGeneralMutation) ResetGoodID() {
	m.good_id = nil
	delete(m.clearedFields, miningprofitgeneral.FieldGoodID)
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *MiningProfitGeneralMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *MiningProfitGeneralMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the MiningProfitGeneral entity.
// If the MiningProfitGeneral object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MiningProfitGeneralMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *MiningProfitGeneralMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[miningprofitgeneral.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *MiningProfitGeneralMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[miningprofitgeneral.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *MiningProfitGeneralMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, miningprofitgeneral.FieldCoinTypeID)
}

// SetAmount sets the "amount" field.
func (m *MiningProfitGeneralMutation) SetAmount(d decimal.Decimal) {
	m.amount = &d
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *MiningProfitGeneralMutation) Amount() (r decimal.Decimal, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the MiningProfitGeneral entity.
// If the MiningProfitGeneral object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MiningProfitGeneralMutation) OldAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds d to the "amount" field.
func (m *MiningProfitGeneralMutation) AddAmount(d decimal.Decimal) {
	if m.addamount != nil {
		*m.addamount = m.addamount.Add(d)
	} else {
		m.addamount = &d
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *MiningProfitGeneralMutation) AddedAmount() (r decimal.Decimal, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ClearAmount clears the value of the "amount" field.
func (m *MiningProfitGeneralMutation) ClearAmount() {
	m.amount = nil
	m.addamount = nil
	m.clearedFields[miningprofitgeneral.FieldAmount] = struct{}{}
}

// AmountCleared returns if the "amount" field was cleared in this mutation.
func (m *MiningProfitGeneralMutation) AmountCleared() bool {
	_, ok := m.clearedFields[miningprofitgeneral.FieldAmount]
	return ok
}

// ResetAmount resets all changes to the "amount" field.
func (m *MiningProfitGeneralMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
	delete(m.clearedFields, miningprofitgeneral.FieldAmount)
}

// SetToPlatform sets the "to_platform" field.
func (m *MiningProfitGeneralMutation) SetToPlatform(d decimal.Decimal) {
	m.to_platform = &d
	m.addto_platform = nil
}

// ToPlatform returns the value of the "to_platform" field in the mutation.
func (m *MiningProfitGeneralMutation) ToPlatform() (r decimal.Decimal, exists bool) {
	v := m.to_platform
	if v == nil {
		return
	}
	return *v, true
}

// OldToPlatform returns the old "to_platform" field's value of the MiningProfitGeneral entity.
// If the MiningProfitGeneral object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MiningProfitGeneralMutation) OldToPlatform(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToPlatform is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToPlatform requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToPlatform: %w", err)
	}
	return oldValue.ToPlatform, nil
}

// AddToPlatform adds d to the "to_platform" field.
func (m *MiningProfitGeneralMutation) AddToPlatform(d decimal.Decimal) {
	if m.addto_platform != nil {
		*m.addto_platform = m.addto_platform.Add(d)
	} else {
		m.addto_platform = &d
	}
}

// AddedToPlatform returns the value that was added to the "to_platform" field in this mutation.
func (m *MiningProfitGeneralMutation) AddedToPlatform() (r decimal.Decimal, exists bool) {
	v := m.addto_platform
	if v == nil {
		return
	}
	return *v, true
}

// ClearToPlatform clears the value of the "to_platform" field.
func (m *MiningProfitGeneralMutation) ClearToPlatform() {
	m.to_platform = nil
	m.addto_platform = nil
	m.clearedFields[miningprofitgeneral.FieldToPlatform] = struct{}{}
}

// ToPlatformCleared returns if the "to_platform" field was cleared in this mutation.
func (m *MiningProfitGeneralMutation) ToPlatformCleared() bool {
	_, ok := m.clearedFields[miningprofitgeneral.FieldToPlatform]
	return ok
}

// ResetToPlatform resets all changes to the "to_platform" field.
func (m *MiningProfitGeneralMutation) ResetToPlatform() {
	m.to_platform = nil
	m.addto_platform = nil
	delete(m.clearedFields, miningprofitgeneral.FieldToPlatform)
}

// SetToUser sets the "to_user" field.
func (m *MiningProfitGeneralMutation) SetToUser(d decimal.Decimal) {
	m.to_user = &d
	m.addto_user = nil
}

// ToUser returns the value of the "to_user" field in the mutation.
func (m *MiningProfitGeneralMutation) ToUser() (r decimal.Decimal, exists bool) {
	v := m.to_user
	if v == nil {
		return
	}
	return *v, true
}

// OldToUser returns the old "to_user" field's value of the MiningProfitGeneral entity.
// If the MiningProfitGeneral object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MiningProfitGeneralMutation) OldToUser(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToUser: %w", err)
	}
	return oldValue.ToUser, nil
}

// AddToUser adds d to the "to_user" field.
func (m *MiningProfitGeneralMutation) AddToUser(d decimal.Decimal) {
	if m.addto_user != nil {
		*m.addto_user = m.addto_user.Add(d)
	} else {
		m.addto_user = &d
	}
}

// AddedToUser returns the value that was added to the "to_user" field in this mutation.
func (m *MiningProfitGeneralMutation) AddedToUser() (r decimal.Decimal, exists bool) {
	v := m.addto_user
	if v == nil {
		return
	}
	return *v, true
}

// ClearToUser clears the value of the "to_user" field.
func (m *MiningProfitGeneralMutation) ClearToUser() {
	m.to_user = nil
	m.addto_user = nil
	m.clearedFields[miningprofitgeneral.FieldToUser] = struct{}{}
}

// ToUserCleared returns if the "to_user" field was cleared in this mutation.
func (m *MiningProfitGeneralMutation) ToUserCleared() bool {
	_, ok := m.clearedFields[miningprofitgeneral.FieldToUser]
	return ok
}

// ResetToUser resets all changes to the "to_user" field.
func (m *MiningProfitGeneralMutation) ResetToUser() {
	m.to_user = nil
	m.addto_user = nil
	delete(m.clearedFields, miningprofitgeneral.FieldToUser)
}

// Where appends a list predicates to the MiningProfitGeneralMutation builder.
func (m *MiningProfitGeneralMutation) Where(ps ...predicate.MiningProfitGeneral) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MiningProfitGeneralMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (MiningProfitGeneral).
func (m *MiningProfitGeneralMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MiningProfitGeneralMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, miningprofitgeneral.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, miningprofitgeneral.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, miningprofitgeneral.FieldDeletedAt)
	}
	if m.good_id != nil {
		fields = append(fields, miningprofitgeneral.FieldGoodID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, miningprofitgeneral.FieldCoinTypeID)
	}
	if m.amount != nil {
		fields = append(fields, miningprofitgeneral.FieldAmount)
	}
	if m.to_platform != nil {
		fields = append(fields, miningprofitgeneral.FieldToPlatform)
	}
	if m.to_user != nil {
		fields = append(fields, miningprofitgeneral.FieldToUser)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MiningProfitGeneralMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case miningprofitgeneral.FieldCreatedAt:
		return m.CreatedAt()
	case miningprofitgeneral.FieldUpdatedAt:
		return m.UpdatedAt()
	case miningprofitgeneral.FieldDeletedAt:
		return m.DeletedAt()
	case miningprofitgeneral.FieldGoodID:
		return m.GoodID()
	case miningprofitgeneral.FieldCoinTypeID:
		return m.CoinTypeID()
	case miningprofitgeneral.FieldAmount:
		return m.Amount()
	case miningprofitgeneral.FieldToPlatform:
		return m.ToPlatform()
	case miningprofitgeneral.FieldToUser:
		return m.ToUser()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MiningProfitGeneralMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case miningprofitgeneral.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case miningprofitgeneral.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case miningprofitgeneral.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case miningprofitgeneral.FieldGoodID:
		return m.OldGoodID(ctx)
	case miningprofitgeneral.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case miningprofitgeneral.FieldAmount:
		return m.OldAmount(ctx)
	case miningprofitgeneral.FieldToPlatform:
		return m.OldToPlatform(ctx)
	case miningprofitgeneral.FieldToUser:
		return m.OldToUser(ctx)
	}
	return nil, fmt.Errorf("unknown MiningProfitGeneral field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MiningProfitGeneralMutation) SetField(name string, value ent.Value) error {
	switch name {
	case miningprofitgeneral.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case miningprofitgeneral.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case miningprofitgeneral.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case miningprofitgeneral.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case miningprofitgeneral.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case miningprofitgeneral.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case miningprofitgeneral.FieldToPlatform:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToPlatform(v)
		return nil
	case miningprofitgeneral.FieldToUser:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToUser(v)
		return nil
	}
	return fmt.Errorf("unknown MiningProfitGeneral field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MiningProfitGeneralMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, miningprofitgeneral.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, miningprofitgeneral.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, miningprofitgeneral.FieldDeletedAt)
	}
	if m.addamount != nil {
		fields = append(fields, miningprofitgeneral.FieldAmount)
	}
	if m.addto_platform != nil {
		fields = append(fields, miningprofitgeneral.FieldToPlatform)
	}
	if m.addto_user != nil {
		fields = append(fields, miningprofitgeneral.FieldToUser)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MiningProfitGeneralMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case miningprofitgeneral.FieldCreatedAt:
		return m.AddedCreatedAt()
	case miningprofitgeneral.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case miningprofitgeneral.FieldDeletedAt:
		return m.AddedDeletedAt()
	case miningprofitgeneral.FieldAmount:
		return m.AddedAmount()
	case miningprofitgeneral.FieldToPlatform:
		return m.AddedToPlatform()
	case miningprofitgeneral.FieldToUser:
		return m.AddedToUser()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MiningProfitGeneralMutation) AddField(name string, value ent.Value) error {
	switch name {
	case miningprofitgeneral.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case miningprofitgeneral.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case miningprofitgeneral.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case miningprofitgeneral.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case miningprofitgeneral.FieldToPlatform:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddToPlatform(v)
		return nil
	case miningprofitgeneral.FieldToUser:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddToUser(v)
		return nil
	}
	return fmt.Errorf("unknown MiningProfitGeneral numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MiningProfitGeneralMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(miningprofitgeneral.FieldGoodID) {
		fields = append(fields, miningprofitgeneral.FieldGoodID)
	}
	if m.FieldCleared(miningprofitgeneral.FieldCoinTypeID) {
		fields = append(fields, miningprofitgeneral.FieldCoinTypeID)
	}
	if m.FieldCleared(miningprofitgeneral.FieldAmount) {
		fields = append(fields, miningprofitgeneral.FieldAmount)
	}
	if m.FieldCleared(miningprofitgeneral.FieldToPlatform) {
		fields = append(fields, miningprofitgeneral.FieldToPlatform)
	}
	if m.FieldCleared(miningprofitgeneral.FieldToUser) {
		fields = append(fields, miningprofitgeneral.FieldToUser)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MiningProfitGeneralMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MiningProfitGeneralMutation) ClearField(name string) error {
	switch name {
	case miningprofitgeneral.FieldGoodID:
		m.ClearGoodID()
		return nil
	case miningprofitgeneral.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case miningprofitgeneral.FieldAmount:
		m.ClearAmount()
		return nil
	case miningprofitgeneral.FieldToPlatform:
		m.ClearToPlatform()
		return nil
	case miningprofitgeneral.FieldToUser:
		m.ClearToUser()
		return nil
	}
	return fmt.Errorf("unknown MiningProfitGeneral nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MiningProfitGeneralMutation) ResetField(name string) error {
	switch name {
	case miningprofitgeneral.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case miningprofitgeneral.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case miningprofitgeneral.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case miningprofitgeneral.FieldGoodID:
		m.ResetGoodID()
		return nil
	case miningprofitgeneral.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case miningprofitgeneral.FieldAmount:
		m.ResetAmount()
		return nil
	case miningprofitgeneral.FieldToPlatform:
		m.ResetToPlatform()
		return nil
	case miningprofitgeneral.FieldToUser:
		m.ResetToUser()
		return nil
	}
	return fmt.Errorf("unknown MiningProfitGeneral field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MiningProfitGeneralMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MiningProfitGeneralMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MiningProfitGeneralMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MiningProfitGeneralMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MiningProfitGeneralMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MiningProfitGeneralMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MiningProfitGeneralMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MiningProfitGeneral unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MiningProfitGeneralMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MiningProfitGeneral edge %s", name)
}

// MiningProfitUnsoldMutation represents an operation that mutates the MiningProfitUnsold nodes in the graph.
type MiningProfitUnsoldMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	created_at      *uint32
	addcreated_at   *int32
	updated_at      *uint32
	addupdated_at   *int32
	deleted_at      *uint32
	adddeleted_at   *int32
	good_id         *uuid.UUID
	coin_type_id    *uuid.UUID
	amount          *decimal.Decimal
	addamount       *decimal.Decimal
	benefit_date    *uint32
	addbenefit_date *int32
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*MiningProfitUnsold, error)
	predicates      []predicate.MiningProfitUnsold
}

var _ ent.Mutation = (*MiningProfitUnsoldMutation)(nil)

// miningprofitunsoldOption allows management of the mutation configuration using functional options.
type miningprofitunsoldOption func(*MiningProfitUnsoldMutation)

// newMiningProfitUnsoldMutation creates new mutation for the MiningProfitUnsold entity.
func newMiningProfitUnsoldMutation(c config, op Op, opts ...miningprofitunsoldOption) *MiningProfitUnsoldMutation {
	m := &MiningProfitUnsoldMutation{
		config:        c,
		op:            op,
		typ:           TypeMiningProfitUnsold,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMiningProfitUnsoldID sets the ID field of the mutation.
func withMiningProfitUnsoldID(id uuid.UUID) miningprofitunsoldOption {
	return func(m *MiningProfitUnsoldMutation) {
		var (
			err   error
			once  sync.Once
			value *MiningProfitUnsold
		)
		m.oldValue = func(ctx context.Context) (*MiningProfitUnsold, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MiningProfitUnsold.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMiningProfitUnsold sets the old MiningProfitUnsold of the mutation.
func withMiningProfitUnsold(node *MiningProfitUnsold) miningprofitunsoldOption {
	return func(m *MiningProfitUnsoldMutation) {
		m.oldValue = func(context.Context) (*MiningProfitUnsold, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MiningProfitUnsoldMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MiningProfitUnsoldMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of MiningProfitUnsold entities.
func (m *MiningProfitUnsoldMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MiningProfitUnsoldMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MiningProfitUnsoldMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MiningProfitUnsold.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *MiningProfitUnsoldMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MiningProfitUnsoldMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the MiningProfitUnsold entity.
// If the MiningProfitUnsold object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MiningProfitUnsoldMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *MiningProfitUnsoldMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *MiningProfitUnsoldMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MiningProfitUnsoldMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MiningProfitUnsoldMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MiningProfitUnsoldMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the MiningProfitUnsold entity.
// If the MiningProfitUnsold object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MiningProfitUnsoldMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *MiningProfitUnsoldMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *MiningProfitUnsoldMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MiningProfitUnsoldMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *MiningProfitUnsoldMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *MiningProfitUnsoldMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the MiningProfitUnsold entity.
// If the MiningProfitUnsold object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MiningProfitUnsoldMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *MiningProfitUnsoldMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *MiningProfitUnsoldMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *MiningProfitUnsoldMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetGoodID sets the "good_id" field.
func (m *MiningProfitUnsoldMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *MiningProfitUnsoldMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the MiningProfitUnsold entity.
// If the MiningProfitUnsold object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MiningProfitUnsoldMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ClearGoodID clears the value of the "good_id" field.
func (m *MiningProfitUnsoldMutation) ClearGoodID() {
	m.good_id = nil
	m.clearedFields[miningprofitunsold.FieldGoodID] = struct{}{}
}

// GoodIDCleared returns if the "good_id" field was cleared in this mutation.
func (m *MiningProfitUnsoldMutation) GoodIDCleared() bool {
	_, ok := m.clearedFields[miningprofitunsold.FieldGoodID]
	return ok
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *MiningProfitUnsoldMutation) ResetGoodID() {
	m.good_id = nil
	delete(m.clearedFields, miningprofitunsold.FieldGoodID)
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *MiningProfitUnsoldMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *MiningProfitUnsoldMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the MiningProfitUnsold entity.
// If the MiningProfitUnsold object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MiningProfitUnsoldMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *MiningProfitUnsoldMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[miningprofitunsold.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *MiningProfitUnsoldMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[miningprofitunsold.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *MiningProfitUnsoldMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, miningprofitunsold.FieldCoinTypeID)
}

// SetAmount sets the "amount" field.
func (m *MiningProfitUnsoldMutation) SetAmount(d decimal.Decimal) {
	m.amount = &d
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *MiningProfitUnsoldMutation) Amount() (r decimal.Decimal, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the MiningProfitUnsold entity.
// If the MiningProfitUnsold object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MiningProfitUnsoldMutation) OldAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds d to the "amount" field.
func (m *MiningProfitUnsoldMutation) AddAmount(d decimal.Decimal) {
	if m.addamount != nil {
		*m.addamount = m.addamount.Add(d)
	} else {
		m.addamount = &d
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *MiningProfitUnsoldMutation) AddedAmount() (r decimal.Decimal, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ClearAmount clears the value of the "amount" field.
func (m *MiningProfitUnsoldMutation) ClearAmount() {
	m.amount = nil
	m.addamount = nil
	m.clearedFields[miningprofitunsold.FieldAmount] = struct{}{}
}

// AmountCleared returns if the "amount" field was cleared in this mutation.
func (m *MiningProfitUnsoldMutation) AmountCleared() bool {
	_, ok := m.clearedFields[miningprofitunsold.FieldAmount]
	return ok
}

// ResetAmount resets all changes to the "amount" field.
func (m *MiningProfitUnsoldMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
	delete(m.clearedFields, miningprofitunsold.FieldAmount)
}

// SetBenefitDate sets the "benefit_date" field.
func (m *MiningProfitUnsoldMutation) SetBenefitDate(u uint32) {
	m.benefit_date = &u
	m.addbenefit_date = nil
}

// BenefitDate returns the value of the "benefit_date" field in the mutation.
func (m *MiningProfitUnsoldMutation) BenefitDate() (r uint32, exists bool) {
	v := m.benefit_date
	if v == nil {
		return
	}
	return *v, true
}

// OldBenefitDate returns the old "benefit_date" field's value of the MiningProfitUnsold entity.
// If the MiningProfitUnsold object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MiningProfitUnsoldMutation) OldBenefitDate(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBenefitDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBenefitDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBenefitDate: %w", err)
	}
	return oldValue.BenefitDate, nil
}

// AddBenefitDate adds u to the "benefit_date" field.
func (m *MiningProfitUnsoldMutation) AddBenefitDate(u int32) {
	if m.addbenefit_date != nil {
		*m.addbenefit_date += u
	} else {
		m.addbenefit_date = &u
	}
}

// AddedBenefitDate returns the value that was added to the "benefit_date" field in this mutation.
func (m *MiningProfitUnsoldMutation) AddedBenefitDate() (r int32, exists bool) {
	v := m.addbenefit_date
	if v == nil {
		return
	}
	return *v, true
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (m *MiningProfitUnsoldMutation) ClearBenefitDate() {
	m.benefit_date = nil
	m.addbenefit_date = nil
	m.clearedFields[miningprofitunsold.FieldBenefitDate] = struct{}{}
}

// BenefitDateCleared returns if the "benefit_date" field was cleared in this mutation.
func (m *MiningProfitUnsoldMutation) BenefitDateCleared() bool {
	_, ok := m.clearedFields[miningprofitunsold.FieldBenefitDate]
	return ok
}

// ResetBenefitDate resets all changes to the "benefit_date" field.
func (m *MiningProfitUnsoldMutation) ResetBenefitDate() {
	m.benefit_date = nil
	m.addbenefit_date = nil
	delete(m.clearedFields, miningprofitunsold.FieldBenefitDate)
}

// Where appends a list predicates to the MiningProfitUnsoldMutation builder.
func (m *MiningProfitUnsoldMutation) Where(ps ...predicate.MiningProfitUnsold) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MiningProfitUnsoldMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (MiningProfitUnsold).
func (m *MiningProfitUnsoldMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MiningProfitUnsoldMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, miningprofitunsold.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, miningprofitunsold.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, miningprofitunsold.FieldDeletedAt)
	}
	if m.good_id != nil {
		fields = append(fields, miningprofitunsold.FieldGoodID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, miningprofitunsold.FieldCoinTypeID)
	}
	if m.amount != nil {
		fields = append(fields, miningprofitunsold.FieldAmount)
	}
	if m.benefit_date != nil {
		fields = append(fields, miningprofitunsold.FieldBenefitDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MiningProfitUnsoldMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case miningprofitunsold.FieldCreatedAt:
		return m.CreatedAt()
	case miningprofitunsold.FieldUpdatedAt:
		return m.UpdatedAt()
	case miningprofitunsold.FieldDeletedAt:
		return m.DeletedAt()
	case miningprofitunsold.FieldGoodID:
		return m.GoodID()
	case miningprofitunsold.FieldCoinTypeID:
		return m.CoinTypeID()
	case miningprofitunsold.FieldAmount:
		return m.Amount()
	case miningprofitunsold.FieldBenefitDate:
		return m.BenefitDate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MiningProfitUnsoldMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case miningprofitunsold.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case miningprofitunsold.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case miningprofitunsold.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case miningprofitunsold.FieldGoodID:
		return m.OldGoodID(ctx)
	case miningprofitunsold.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case miningprofitunsold.FieldAmount:
		return m.OldAmount(ctx)
	case miningprofitunsold.FieldBenefitDate:
		return m.OldBenefitDate(ctx)
	}
	return nil, fmt.Errorf("unknown MiningProfitUnsold field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MiningProfitUnsoldMutation) SetField(name string, value ent.Value) error {
	switch name {
	case miningprofitunsold.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case miningprofitunsold.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case miningprofitunsold.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case miningprofitunsold.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case miningprofitunsold.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case miningprofitunsold.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case miningprofitunsold.FieldBenefitDate:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBenefitDate(v)
		return nil
	}
	return fmt.Errorf("unknown MiningProfitUnsold field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MiningProfitUnsoldMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, miningprofitunsold.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, miningprofitunsold.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, miningprofitunsold.FieldDeletedAt)
	}
	if m.addamount != nil {
		fields = append(fields, miningprofitunsold.FieldAmount)
	}
	if m.addbenefit_date != nil {
		fields = append(fields, miningprofitunsold.FieldBenefitDate)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MiningProfitUnsoldMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case miningprofitunsold.FieldCreatedAt:
		return m.AddedCreatedAt()
	case miningprofitunsold.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case miningprofitunsold.FieldDeletedAt:
		return m.AddedDeletedAt()
	case miningprofitunsold.FieldAmount:
		return m.AddedAmount()
	case miningprofitunsold.FieldBenefitDate:
		return m.AddedBenefitDate()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MiningProfitUnsoldMutation) AddField(name string, value ent.Value) error {
	switch name {
	case miningprofitunsold.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case miningprofitunsold.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case miningprofitunsold.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case miningprofitunsold.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case miningprofitunsold.FieldBenefitDate:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBenefitDate(v)
		return nil
	}
	return fmt.Errorf("unknown MiningProfitUnsold numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MiningProfitUnsoldMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(miningprofitunsold.FieldGoodID) {
		fields = append(fields, miningprofitunsold.FieldGoodID)
	}
	if m.FieldCleared(miningprofitunsold.FieldCoinTypeID) {
		fields = append(fields, miningprofitunsold.FieldCoinTypeID)
	}
	if m.FieldCleared(miningprofitunsold.FieldAmount) {
		fields = append(fields, miningprofitunsold.FieldAmount)
	}
	if m.FieldCleared(miningprofitunsold.FieldBenefitDate) {
		fields = append(fields, miningprofitunsold.FieldBenefitDate)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MiningProfitUnsoldMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MiningProfitUnsoldMutation) ClearField(name string) error {
	switch name {
	case miningprofitunsold.FieldGoodID:
		m.ClearGoodID()
		return nil
	case miningprofitunsold.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case miningprofitunsold.FieldAmount:
		m.ClearAmount()
		return nil
	case miningprofitunsold.FieldBenefitDate:
		m.ClearBenefitDate()
		return nil
	}
	return fmt.Errorf("unknown MiningProfitUnsold nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MiningProfitUnsoldMutation) ResetField(name string) error {
	switch name {
	case miningprofitunsold.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case miningprofitunsold.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case miningprofitunsold.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case miningprofitunsold.FieldGoodID:
		m.ResetGoodID()
		return nil
	case miningprofitunsold.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case miningprofitunsold.FieldAmount:
		m.ResetAmount()
		return nil
	case miningprofitunsold.FieldBenefitDate:
		m.ResetBenefitDate()
		return nil
	}
	return fmt.Errorf("unknown MiningProfitUnsold field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MiningProfitUnsoldMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MiningProfitUnsoldMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MiningProfitUnsoldMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MiningProfitUnsoldMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MiningProfitUnsoldMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MiningProfitUnsoldMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MiningProfitUnsoldMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MiningProfitUnsold unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MiningProfitUnsoldMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MiningProfitUnsold edge %s", name)
}

// ProfitMutation represents an operation that mutates the Profit nodes in the graph.
type ProfitMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	app_id        *uuid.UUID
	user_id       *uuid.UUID
	coin_type_id  *uuid.UUID
	incoming      *decimal.Decimal
	addincoming   *decimal.Decimal
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Profit, error)
	predicates    []predicate.Profit
}

var _ ent.Mutation = (*ProfitMutation)(nil)

// profitOption allows management of the mutation configuration using functional options.
type profitOption func(*ProfitMutation)

// newProfitMutation creates new mutation for the Profit entity.
func newProfitMutation(c config, op Op, opts ...profitOption) *ProfitMutation {
	m := &ProfitMutation{
		config:        c,
		op:            op,
		typ:           TypeProfit,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProfitID sets the ID field of the mutation.
func withProfitID(id uuid.UUID) profitOption {
	return func(m *ProfitMutation) {
		var (
			err   error
			once  sync.Once
			value *Profit
		)
		m.oldValue = func(ctx context.Context) (*Profit, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Profit.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProfit sets the old Profit of the mutation.
func withProfit(node *Profit) profitOption {
	return func(m *ProfitMutation) {
		m.oldValue = func(context.Context) (*Profit, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProfitMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProfitMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Profit entities.
func (m *ProfitMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProfitMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProfitMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Profit.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ProfitMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProfitMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Profit entity.
// If the Profit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *ProfitMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *ProfitMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProfitMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProfitMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProfitMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Profit entity.
// If the Profit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *ProfitMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *ProfitMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProfitMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ProfitMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ProfitMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Profit entity.
// If the Profit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *ProfitMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *ProfitMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ProfitMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *ProfitMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *ProfitMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the Profit entity.
// If the Profit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *ProfitMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[profit.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *ProfitMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[profit.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *ProfitMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, profit.FieldAppID)
}

// SetUserID sets the "user_id" field.
func (m *ProfitMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ProfitMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Profit entity.
// If the Profit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *ProfitMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[profit.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *ProfitMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[profit.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ProfitMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, profit.FieldUserID)
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *ProfitMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *ProfitMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the Profit entity.
// If the Profit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *ProfitMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[profit.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *ProfitMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[profit.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *ProfitMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, profit.FieldCoinTypeID)
}

// SetIncoming sets the "incoming" field.
func (m *ProfitMutation) SetIncoming(d decimal.Decimal) {
	m.incoming = &d
	m.addincoming = nil
}

// Incoming returns the value of the "incoming" field in the mutation.
func (m *ProfitMutation) Incoming() (r decimal.Decimal, exists bool) {
	v := m.incoming
	if v == nil {
		return
	}
	return *v, true
}

// OldIncoming returns the old "incoming" field's value of the Profit entity.
// If the Profit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitMutation) OldIncoming(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIncoming is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIncoming requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIncoming: %w", err)
	}
	return oldValue.Incoming, nil
}

// AddIncoming adds d to the "incoming" field.
func (m *ProfitMutation) AddIncoming(d decimal.Decimal) {
	if m.addincoming != nil {
		*m.addincoming = m.addincoming.Add(d)
	} else {
		m.addincoming = &d
	}
}

// AddedIncoming returns the value that was added to the "incoming" field in this mutation.
func (m *ProfitMutation) AddedIncoming() (r decimal.Decimal, exists bool) {
	v := m.addincoming
	if v == nil {
		return
	}
	return *v, true
}

// ClearIncoming clears the value of the "incoming" field.
func (m *ProfitMutation) ClearIncoming() {
	m.incoming = nil
	m.addincoming = nil
	m.clearedFields[profit.FieldIncoming] = struct{}{}
}

// IncomingCleared returns if the "incoming" field was cleared in this mutation.
func (m *ProfitMutation) IncomingCleared() bool {
	_, ok := m.clearedFields[profit.FieldIncoming]
	return ok
}

// ResetIncoming resets all changes to the "incoming" field.
func (m *ProfitMutation) ResetIncoming() {
	m.incoming = nil
	m.addincoming = nil
	delete(m.clearedFields, profit.FieldIncoming)
}

// Where appends a list predicates to the ProfitMutation builder.
func (m *ProfitMutation) Where(ps ...predicate.Profit) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProfitMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Profit).
func (m *ProfitMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProfitMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, profit.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, profit.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, profit.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, profit.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, profit.FieldUserID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, profit.FieldCoinTypeID)
	}
	if m.incoming != nil {
		fields = append(fields, profit.FieldIncoming)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProfitMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case profit.FieldCreatedAt:
		return m.CreatedAt()
	case profit.FieldUpdatedAt:
		return m.UpdatedAt()
	case profit.FieldDeletedAt:
		return m.DeletedAt()
	case profit.FieldAppID:
		return m.AppID()
	case profit.FieldUserID:
		return m.UserID()
	case profit.FieldCoinTypeID:
		return m.CoinTypeID()
	case profit.FieldIncoming:
		return m.Incoming()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProfitMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case profit.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case profit.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case profit.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case profit.FieldAppID:
		return m.OldAppID(ctx)
	case profit.FieldUserID:
		return m.OldUserID(ctx)
	case profit.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case profit.FieldIncoming:
		return m.OldIncoming(ctx)
	}
	return nil, fmt.Errorf("unknown Profit field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProfitMutation) SetField(name string, value ent.Value) error {
	switch name {
	case profit.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case profit.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case profit.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case profit.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case profit.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case profit.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case profit.FieldIncoming:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIncoming(v)
		return nil
	}
	return fmt.Errorf("unknown Profit field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProfitMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, profit.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, profit.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, profit.FieldDeletedAt)
	}
	if m.addincoming != nil {
		fields = append(fields, profit.FieldIncoming)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProfitMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case profit.FieldCreatedAt:
		return m.AddedCreatedAt()
	case profit.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case profit.FieldDeletedAt:
		return m.AddedDeletedAt()
	case profit.FieldIncoming:
		return m.AddedIncoming()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProfitMutation) AddField(name string, value ent.Value) error {
	switch name {
	case profit.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case profit.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case profit.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case profit.FieldIncoming:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIncoming(v)
		return nil
	}
	return fmt.Errorf("unknown Profit numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProfitMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(profit.FieldAppID) {
		fields = append(fields, profit.FieldAppID)
	}
	if m.FieldCleared(profit.FieldUserID) {
		fields = append(fields, profit.FieldUserID)
	}
	if m.FieldCleared(profit.FieldCoinTypeID) {
		fields = append(fields, profit.FieldCoinTypeID)
	}
	if m.FieldCleared(profit.FieldIncoming) {
		fields = append(fields, profit.FieldIncoming)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProfitMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProfitMutation) ClearField(name string) error {
	switch name {
	case profit.FieldAppID:
		m.ClearAppID()
		return nil
	case profit.FieldUserID:
		m.ClearUserID()
		return nil
	case profit.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case profit.FieldIncoming:
		m.ClearIncoming()
		return nil
	}
	return fmt.Errorf("unknown Profit nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProfitMutation) ResetField(name string) error {
	switch name {
	case profit.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case profit.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case profit.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case profit.FieldAppID:
		m.ResetAppID()
		return nil
	case profit.FieldUserID:
		m.ResetUserID()
		return nil
	case profit.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case profit.FieldIncoming:
		m.ResetIncoming()
		return nil
	}
	return fmt.Errorf("unknown Profit field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProfitMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProfitMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProfitMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProfitMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProfitMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProfitMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProfitMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Profit unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProfitMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Profit edge %s", name)
}

// WithdrawMutation represents an operation that mutates the Withdraw nodes in the graph.
type WithdrawMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uuid.UUID
	created_at              *uint32
	addcreated_at           *int32
	updated_at              *uint32
	addupdated_at           *int32
	deleted_at              *uint32
	adddeleted_at           *int32
	app_id                  *uuid.UUID
	user_id                 *uuid.UUID
	coin_type_id            *uuid.UUID
	account_id              *uuid.UUID
	platform_transaction_id *uuid.UUID
	chain_transaction_id    *string
	state                   *string
	amount                  *decimal.Decimal
	addamount               *decimal.Decimal
	clearedFields           map[string]struct{}
	done                    bool
	oldValue                func(context.Context) (*Withdraw, error)
	predicates              []predicate.Withdraw
}

var _ ent.Mutation = (*WithdrawMutation)(nil)

// withdrawOption allows management of the mutation configuration using functional options.
type withdrawOption func(*WithdrawMutation)

// newWithdrawMutation creates new mutation for the Withdraw entity.
func newWithdrawMutation(c config, op Op, opts ...withdrawOption) *WithdrawMutation {
	m := &WithdrawMutation{
		config:        c,
		op:            op,
		typ:           TypeWithdraw,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWithdrawID sets the ID field of the mutation.
func withWithdrawID(id uuid.UUID) withdrawOption {
	return func(m *WithdrawMutation) {
		var (
			err   error
			once  sync.Once
			value *Withdraw
		)
		m.oldValue = func(ctx context.Context) (*Withdraw, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Withdraw.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWithdraw sets the old Withdraw of the mutation.
func withWithdraw(node *Withdraw) withdrawOption {
	return func(m *WithdrawMutation) {
		m.oldValue = func(context.Context) (*Withdraw, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WithdrawMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WithdrawMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Withdraw entities.
func (m *WithdrawMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WithdrawMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WithdrawMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Withdraw.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *WithdrawMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *WithdrawMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Withdraw entity.
// If the Withdraw object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WithdrawMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *WithdrawMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *WithdrawMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *WithdrawMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *WithdrawMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *WithdrawMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Withdraw entity.
// If the Withdraw object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WithdrawMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *WithdrawMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *WithdrawMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *WithdrawMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *WithdrawMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *WithdrawMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Withdraw entity.
// If the Withdraw object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WithdrawMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *WithdrawMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *WithdrawMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *WithdrawMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *WithdrawMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *WithdrawMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the Withdraw entity.
// If the Withdraw object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WithdrawMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *WithdrawMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[withdraw.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *WithdrawMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[withdraw.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *WithdrawMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, withdraw.FieldAppID)
}

// SetUserID sets the "user_id" field.
func (m *WithdrawMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *WithdrawMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Withdraw entity.
// If the Withdraw object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WithdrawMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *WithdrawMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[withdraw.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *WithdrawMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[withdraw.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *WithdrawMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, withdraw.FieldUserID)
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *WithdrawMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *WithdrawMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the Withdraw entity.
// If the Withdraw object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WithdrawMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *WithdrawMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[withdraw.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *WithdrawMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[withdraw.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *WithdrawMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, withdraw.FieldCoinTypeID)
}

// SetAccountID sets the "account_id" field.
func (m *WithdrawMutation) SetAccountID(u uuid.UUID) {
	m.account_id = &u
}

// AccountID returns the value of the "account_id" field in the mutation.
func (m *WithdrawMutation) AccountID() (r uuid.UUID, exists bool) {
	v := m.account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountID returns the old "account_id" field's value of the Withdraw entity.
// If the Withdraw object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WithdrawMutation) OldAccountID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountID: %w", err)
	}
	return oldValue.AccountID, nil
}

// ClearAccountID clears the value of the "account_id" field.
func (m *WithdrawMutation) ClearAccountID() {
	m.account_id = nil
	m.clearedFields[withdraw.FieldAccountID] = struct{}{}
}

// AccountIDCleared returns if the "account_id" field was cleared in this mutation.
func (m *WithdrawMutation) AccountIDCleared() bool {
	_, ok := m.clearedFields[withdraw.FieldAccountID]
	return ok
}

// ResetAccountID resets all changes to the "account_id" field.
func (m *WithdrawMutation) ResetAccountID() {
	m.account_id = nil
	delete(m.clearedFields, withdraw.FieldAccountID)
}

// SetPlatformTransactionID sets the "platform_transaction_id" field.
func (m *WithdrawMutation) SetPlatformTransactionID(u uuid.UUID) {
	m.platform_transaction_id = &u
}

// PlatformTransactionID returns the value of the "platform_transaction_id" field in the mutation.
func (m *WithdrawMutation) PlatformTransactionID() (r uuid.UUID, exists bool) {
	v := m.platform_transaction_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatformTransactionID returns the old "platform_transaction_id" field's value of the Withdraw entity.
// If the Withdraw object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WithdrawMutation) OldPlatformTransactionID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatformTransactionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatformTransactionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatformTransactionID: %w", err)
	}
	return oldValue.PlatformTransactionID, nil
}

// ClearPlatformTransactionID clears the value of the "platform_transaction_id" field.
func (m *WithdrawMutation) ClearPlatformTransactionID() {
	m.platform_transaction_id = nil
	m.clearedFields[withdraw.FieldPlatformTransactionID] = struct{}{}
}

// PlatformTransactionIDCleared returns if the "platform_transaction_id" field was cleared in this mutation.
func (m *WithdrawMutation) PlatformTransactionIDCleared() bool {
	_, ok := m.clearedFields[withdraw.FieldPlatformTransactionID]
	return ok
}

// ResetPlatformTransactionID resets all changes to the "platform_transaction_id" field.
func (m *WithdrawMutation) ResetPlatformTransactionID() {
	m.platform_transaction_id = nil
	delete(m.clearedFields, withdraw.FieldPlatformTransactionID)
}

// SetChainTransactionID sets the "chain_transaction_id" field.
func (m *WithdrawMutation) SetChainTransactionID(s string) {
	m.chain_transaction_id = &s
}

// ChainTransactionID returns the value of the "chain_transaction_id" field in the mutation.
func (m *WithdrawMutation) ChainTransactionID() (r string, exists bool) {
	v := m.chain_transaction_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChainTransactionID returns the old "chain_transaction_id" field's value of the Withdraw entity.
// If the Withdraw object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WithdrawMutation) OldChainTransactionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChainTransactionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChainTransactionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChainTransactionID: %w", err)
	}
	return oldValue.ChainTransactionID, nil
}

// ClearChainTransactionID clears the value of the "chain_transaction_id" field.
func (m *WithdrawMutation) ClearChainTransactionID() {
	m.chain_transaction_id = nil
	m.clearedFields[withdraw.FieldChainTransactionID] = struct{}{}
}

// ChainTransactionIDCleared returns if the "chain_transaction_id" field was cleared in this mutation.
func (m *WithdrawMutation) ChainTransactionIDCleared() bool {
	_, ok := m.clearedFields[withdraw.FieldChainTransactionID]
	return ok
}

// ResetChainTransactionID resets all changes to the "chain_transaction_id" field.
func (m *WithdrawMutation) ResetChainTransactionID() {
	m.chain_transaction_id = nil
	delete(m.clearedFields, withdraw.FieldChainTransactionID)
}

// SetState sets the "state" field.
func (m *WithdrawMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *WithdrawMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the Withdraw entity.
// If the Withdraw object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WithdrawMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ClearState clears the value of the "state" field.
func (m *WithdrawMutation) ClearState() {
	m.state = nil
	m.clearedFields[withdraw.FieldState] = struct{}{}
}

// StateCleared returns if the "state" field was cleared in this mutation.
func (m *WithdrawMutation) StateCleared() bool {
	_, ok := m.clearedFields[withdraw.FieldState]
	return ok
}

// ResetState resets all changes to the "state" field.
func (m *WithdrawMutation) ResetState() {
	m.state = nil
	delete(m.clearedFields, withdraw.FieldState)
}

// SetAmount sets the "amount" field.
func (m *WithdrawMutation) SetAmount(d decimal.Decimal) {
	m.amount = &d
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *WithdrawMutation) Amount() (r decimal.Decimal, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Withdraw entity.
// If the Withdraw object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WithdrawMutation) OldAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds d to the "amount" field.
func (m *WithdrawMutation) AddAmount(d decimal.Decimal) {
	if m.addamount != nil {
		*m.addamount = m.addamount.Add(d)
	} else {
		m.addamount = &d
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *WithdrawMutation) AddedAmount() (r decimal.Decimal, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ClearAmount clears the value of the "amount" field.
func (m *WithdrawMutation) ClearAmount() {
	m.amount = nil
	m.addamount = nil
	m.clearedFields[withdraw.FieldAmount] = struct{}{}
}

// AmountCleared returns if the "amount" field was cleared in this mutation.
func (m *WithdrawMutation) AmountCleared() bool {
	_, ok := m.clearedFields[withdraw.FieldAmount]
	return ok
}

// ResetAmount resets all changes to the "amount" field.
func (m *WithdrawMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
	delete(m.clearedFields, withdraw.FieldAmount)
}

// Where appends a list predicates to the WithdrawMutation builder.
func (m *WithdrawMutation) Where(ps ...predicate.Withdraw) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *WithdrawMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Withdraw).
func (m *WithdrawMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WithdrawMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.created_at != nil {
		fields = append(fields, withdraw.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, withdraw.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, withdraw.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, withdraw.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, withdraw.FieldUserID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, withdraw.FieldCoinTypeID)
	}
	if m.account_id != nil {
		fields = append(fields, withdraw.FieldAccountID)
	}
	if m.platform_transaction_id != nil {
		fields = append(fields, withdraw.FieldPlatformTransactionID)
	}
	if m.chain_transaction_id != nil {
		fields = append(fields, withdraw.FieldChainTransactionID)
	}
	if m.state != nil {
		fields = append(fields, withdraw.FieldState)
	}
	if m.amount != nil {
		fields = append(fields, withdraw.FieldAmount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WithdrawMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case withdraw.FieldCreatedAt:
		return m.CreatedAt()
	case withdraw.FieldUpdatedAt:
		return m.UpdatedAt()
	case withdraw.FieldDeletedAt:
		return m.DeletedAt()
	case withdraw.FieldAppID:
		return m.AppID()
	case withdraw.FieldUserID:
		return m.UserID()
	case withdraw.FieldCoinTypeID:
		return m.CoinTypeID()
	case withdraw.FieldAccountID:
		return m.AccountID()
	case withdraw.FieldPlatformTransactionID:
		return m.PlatformTransactionID()
	case withdraw.FieldChainTransactionID:
		return m.ChainTransactionID()
	case withdraw.FieldState:
		return m.State()
	case withdraw.FieldAmount:
		return m.Amount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WithdrawMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case withdraw.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case withdraw.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case withdraw.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case withdraw.FieldAppID:
		return m.OldAppID(ctx)
	case withdraw.FieldUserID:
		return m.OldUserID(ctx)
	case withdraw.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case withdraw.FieldAccountID:
		return m.OldAccountID(ctx)
	case withdraw.FieldPlatformTransactionID:
		return m.OldPlatformTransactionID(ctx)
	case withdraw.FieldChainTransactionID:
		return m.OldChainTransactionID(ctx)
	case withdraw.FieldState:
		return m.OldState(ctx)
	case withdraw.FieldAmount:
		return m.OldAmount(ctx)
	}
	return nil, fmt.Errorf("unknown Withdraw field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WithdrawMutation) SetField(name string, value ent.Value) error {
	switch name {
	case withdraw.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case withdraw.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case withdraw.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case withdraw.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case withdraw.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case withdraw.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case withdraw.FieldAccountID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountID(v)
		return nil
	case withdraw.FieldPlatformTransactionID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatformTransactionID(v)
		return nil
	case withdraw.FieldChainTransactionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChainTransactionID(v)
		return nil
	case withdraw.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case withdraw.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	}
	return fmt.Errorf("unknown Withdraw field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WithdrawMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, withdraw.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, withdraw.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, withdraw.FieldDeletedAt)
	}
	if m.addamount != nil {
		fields = append(fields, withdraw.FieldAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WithdrawMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case withdraw.FieldCreatedAt:
		return m.AddedCreatedAt()
	case withdraw.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case withdraw.FieldDeletedAt:
		return m.AddedDeletedAt()
	case withdraw.FieldAmount:
		return m.AddedAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WithdrawMutation) AddField(name string, value ent.Value) error {
	switch name {
	case withdraw.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case withdraw.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case withdraw.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case withdraw.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	}
	return fmt.Errorf("unknown Withdraw numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WithdrawMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(withdraw.FieldAppID) {
		fields = append(fields, withdraw.FieldAppID)
	}
	if m.FieldCleared(withdraw.FieldUserID) {
		fields = append(fields, withdraw.FieldUserID)
	}
	if m.FieldCleared(withdraw.FieldCoinTypeID) {
		fields = append(fields, withdraw.FieldCoinTypeID)
	}
	if m.FieldCleared(withdraw.FieldAccountID) {
		fields = append(fields, withdraw.FieldAccountID)
	}
	if m.FieldCleared(withdraw.FieldPlatformTransactionID) {
		fields = append(fields, withdraw.FieldPlatformTransactionID)
	}
	if m.FieldCleared(withdraw.FieldChainTransactionID) {
		fields = append(fields, withdraw.FieldChainTransactionID)
	}
	if m.FieldCleared(withdraw.FieldState) {
		fields = append(fields, withdraw.FieldState)
	}
	if m.FieldCleared(withdraw.FieldAmount) {
		fields = append(fields, withdraw.FieldAmount)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WithdrawMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WithdrawMutation) ClearField(name string) error {
	switch name {
	case withdraw.FieldAppID:
		m.ClearAppID()
		return nil
	case withdraw.FieldUserID:
		m.ClearUserID()
		return nil
	case withdraw.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case withdraw.FieldAccountID:
		m.ClearAccountID()
		return nil
	case withdraw.FieldPlatformTransactionID:
		m.ClearPlatformTransactionID()
		return nil
	case withdraw.FieldChainTransactionID:
		m.ClearChainTransactionID()
		return nil
	case withdraw.FieldState:
		m.ClearState()
		return nil
	case withdraw.FieldAmount:
		m.ClearAmount()
		return nil
	}
	return fmt.Errorf("unknown Withdraw nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WithdrawMutation) ResetField(name string) error {
	switch name {
	case withdraw.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case withdraw.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case withdraw.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case withdraw.FieldAppID:
		m.ResetAppID()
		return nil
	case withdraw.FieldUserID:
		m.ResetUserID()
		return nil
	case withdraw.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case withdraw.FieldAccountID:
		m.ResetAccountID()
		return nil
	case withdraw.FieldPlatformTransactionID:
		m.ResetPlatformTransactionID()
		return nil
	case withdraw.FieldChainTransactionID:
		m.ResetChainTransactionID()
		return nil
	case withdraw.FieldState:
		m.ResetState()
		return nil
	case withdraw.FieldAmount:
		m.ResetAmount()
		return nil
	}
	return fmt.Errorf("unknown Withdraw field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WithdrawMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WithdrawMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WithdrawMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WithdrawMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WithdrawMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WithdrawMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WithdrawMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Withdraw unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WithdrawMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Withdraw edge %s", name)
}
