// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/ledger-manager/pkg/db/ent/miningprofitgeneral"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// MiningProfitGeneralCreate is the builder for creating a MiningProfitGeneral entity.
type MiningProfitGeneralCreate struct {
	config
	mutation *MiningProfitGeneralMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (mpgc *MiningProfitGeneralCreate) SetCreatedAt(u uint32) *MiningProfitGeneralCreate {
	mpgc.mutation.SetCreatedAt(u)
	return mpgc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mpgc *MiningProfitGeneralCreate) SetNillableCreatedAt(u *uint32) *MiningProfitGeneralCreate {
	if u != nil {
		mpgc.SetCreatedAt(*u)
	}
	return mpgc
}

// SetUpdatedAt sets the "updated_at" field.
func (mpgc *MiningProfitGeneralCreate) SetUpdatedAt(u uint32) *MiningProfitGeneralCreate {
	mpgc.mutation.SetUpdatedAt(u)
	return mpgc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mpgc *MiningProfitGeneralCreate) SetNillableUpdatedAt(u *uint32) *MiningProfitGeneralCreate {
	if u != nil {
		mpgc.SetUpdatedAt(*u)
	}
	return mpgc
}

// SetDeletedAt sets the "deleted_at" field.
func (mpgc *MiningProfitGeneralCreate) SetDeletedAt(u uint32) *MiningProfitGeneralCreate {
	mpgc.mutation.SetDeletedAt(u)
	return mpgc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mpgc *MiningProfitGeneralCreate) SetNillableDeletedAt(u *uint32) *MiningProfitGeneralCreate {
	if u != nil {
		mpgc.SetDeletedAt(*u)
	}
	return mpgc
}

// SetGoodID sets the "good_id" field.
func (mpgc *MiningProfitGeneralCreate) SetGoodID(u uuid.UUID) *MiningProfitGeneralCreate {
	mpgc.mutation.SetGoodID(u)
	return mpgc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (mpgc *MiningProfitGeneralCreate) SetNillableGoodID(u *uuid.UUID) *MiningProfitGeneralCreate {
	if u != nil {
		mpgc.SetGoodID(*u)
	}
	return mpgc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (mpgc *MiningProfitGeneralCreate) SetCoinTypeID(u uuid.UUID) *MiningProfitGeneralCreate {
	mpgc.mutation.SetCoinTypeID(u)
	return mpgc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (mpgc *MiningProfitGeneralCreate) SetNillableCoinTypeID(u *uuid.UUID) *MiningProfitGeneralCreate {
	if u != nil {
		mpgc.SetCoinTypeID(*u)
	}
	return mpgc
}

// SetAmount sets the "amount" field.
func (mpgc *MiningProfitGeneralCreate) SetAmount(d decimal.Decimal) *MiningProfitGeneralCreate {
	mpgc.mutation.SetAmount(d)
	return mpgc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (mpgc *MiningProfitGeneralCreate) SetNillableAmount(d *decimal.Decimal) *MiningProfitGeneralCreate {
	if d != nil {
		mpgc.SetAmount(*d)
	}
	return mpgc
}

// SetToPlatform sets the "to_platform" field.
func (mpgc *MiningProfitGeneralCreate) SetToPlatform(d decimal.Decimal) *MiningProfitGeneralCreate {
	mpgc.mutation.SetToPlatform(d)
	return mpgc
}

// SetNillableToPlatform sets the "to_platform" field if the given value is not nil.
func (mpgc *MiningProfitGeneralCreate) SetNillableToPlatform(d *decimal.Decimal) *MiningProfitGeneralCreate {
	if d != nil {
		mpgc.SetToPlatform(*d)
	}
	return mpgc
}

// SetToUser sets the "to_user" field.
func (mpgc *MiningProfitGeneralCreate) SetToUser(d decimal.Decimal) *MiningProfitGeneralCreate {
	mpgc.mutation.SetToUser(d)
	return mpgc
}

// SetNillableToUser sets the "to_user" field if the given value is not nil.
func (mpgc *MiningProfitGeneralCreate) SetNillableToUser(d *decimal.Decimal) *MiningProfitGeneralCreate {
	if d != nil {
		mpgc.SetToUser(*d)
	}
	return mpgc
}

// SetID sets the "id" field.
func (mpgc *MiningProfitGeneralCreate) SetID(u uuid.UUID) *MiningProfitGeneralCreate {
	mpgc.mutation.SetID(u)
	return mpgc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mpgc *MiningProfitGeneralCreate) SetNillableID(u *uuid.UUID) *MiningProfitGeneralCreate {
	if u != nil {
		mpgc.SetID(*u)
	}
	return mpgc
}

// Mutation returns the MiningProfitGeneralMutation object of the builder.
func (mpgc *MiningProfitGeneralCreate) Mutation() *MiningProfitGeneralMutation {
	return mpgc.mutation
}

// Save creates the MiningProfitGeneral in the database.
func (mpgc *MiningProfitGeneralCreate) Save(ctx context.Context) (*MiningProfitGeneral, error) {
	var (
		err  error
		node *MiningProfitGeneral
	)
	if err := mpgc.defaults(); err != nil {
		return nil, err
	}
	if len(mpgc.hooks) == 0 {
		if err = mpgc.check(); err != nil {
			return nil, err
		}
		node, err = mpgc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MiningProfitGeneralMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mpgc.check(); err != nil {
				return nil, err
			}
			mpgc.mutation = mutation
			if node, err = mpgc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mpgc.hooks) - 1; i >= 0; i-- {
			if mpgc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mpgc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mpgc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*MiningProfitGeneral)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MiningProfitGeneralMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mpgc *MiningProfitGeneralCreate) SaveX(ctx context.Context) *MiningProfitGeneral {
	v, err := mpgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpgc *MiningProfitGeneralCreate) Exec(ctx context.Context) error {
	_, err := mpgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpgc *MiningProfitGeneralCreate) ExecX(ctx context.Context) {
	if err := mpgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpgc *MiningProfitGeneralCreate) defaults() error {
	if _, ok := mpgc.mutation.CreatedAt(); !ok {
		if miningprofitgeneral.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized miningprofitgeneral.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := miningprofitgeneral.DefaultCreatedAt()
		mpgc.mutation.SetCreatedAt(v)
	}
	if _, ok := mpgc.mutation.UpdatedAt(); !ok {
		if miningprofitgeneral.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized miningprofitgeneral.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := miningprofitgeneral.DefaultUpdatedAt()
		mpgc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mpgc.mutation.DeletedAt(); !ok {
		if miningprofitgeneral.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized miningprofitgeneral.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := miningprofitgeneral.DefaultDeletedAt()
		mpgc.mutation.SetDeletedAt(v)
	}
	if _, ok := mpgc.mutation.GoodID(); !ok {
		if miningprofitgeneral.DefaultGoodID == nil {
			return fmt.Errorf("ent: uninitialized miningprofitgeneral.DefaultGoodID (forgotten import ent/runtime?)")
		}
		v := miningprofitgeneral.DefaultGoodID()
		mpgc.mutation.SetGoodID(v)
	}
	if _, ok := mpgc.mutation.CoinTypeID(); !ok {
		if miningprofitgeneral.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized miningprofitgeneral.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := miningprofitgeneral.DefaultCoinTypeID()
		mpgc.mutation.SetCoinTypeID(v)
	}
	if _, ok := mpgc.mutation.ID(); !ok {
		if miningprofitgeneral.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized miningprofitgeneral.DefaultID (forgotten import ent/runtime?)")
		}
		v := miningprofitgeneral.DefaultID()
		mpgc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (mpgc *MiningProfitGeneralCreate) check() error {
	if _, ok := mpgc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MiningProfitGeneral.created_at"`)}
	}
	if _, ok := mpgc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "MiningProfitGeneral.updated_at"`)}
	}
	if _, ok := mpgc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "MiningProfitGeneral.deleted_at"`)}
	}
	return nil
}

func (mpgc *MiningProfitGeneralCreate) sqlSave(ctx context.Context) (*MiningProfitGeneral, error) {
	_node, _spec := mpgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mpgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (mpgc *MiningProfitGeneralCreate) createSpec() (*MiningProfitGeneral, *sqlgraph.CreateSpec) {
	var (
		_node = &MiningProfitGeneral{config: mpgc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: miningprofitgeneral.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: miningprofitgeneral.FieldID,
			},
		}
	)
	_spec.OnConflict = mpgc.conflict
	if id, ok := mpgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mpgc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitgeneral.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := mpgc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitgeneral.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := mpgc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitgeneral.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := mpgc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: miningprofitgeneral.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := mpgc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: miningprofitgeneral.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := mpgc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: miningprofitgeneral.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := mpgc.mutation.ToPlatform(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: miningprofitgeneral.FieldToPlatform,
		})
		_node.ToPlatform = value
	}
	if value, ok := mpgc.mutation.ToUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: miningprofitgeneral.FieldToUser,
		})
		_node.ToUser = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MiningProfitGeneral.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MiningProfitGeneralUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (mpgc *MiningProfitGeneralCreate) OnConflict(opts ...sql.ConflictOption) *MiningProfitGeneralUpsertOne {
	mpgc.conflict = opts
	return &MiningProfitGeneralUpsertOne{
		create: mpgc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MiningProfitGeneral.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (mpgc *MiningProfitGeneralCreate) OnConflictColumns(columns ...string) *MiningProfitGeneralUpsertOne {
	mpgc.conflict = append(mpgc.conflict, sql.ConflictColumns(columns...))
	return &MiningProfitGeneralUpsertOne{
		create: mpgc,
	}
}

type (
	// MiningProfitGeneralUpsertOne is the builder for "upsert"-ing
	//  one MiningProfitGeneral node.
	MiningProfitGeneralUpsertOne struct {
		create *MiningProfitGeneralCreate
	}

	// MiningProfitGeneralUpsert is the "OnConflict" setter.
	MiningProfitGeneralUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *MiningProfitGeneralUpsert) SetCreatedAt(v uint32) *MiningProfitGeneralUpsert {
	u.Set(miningprofitgeneral.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MiningProfitGeneralUpsert) UpdateCreatedAt() *MiningProfitGeneralUpsert {
	u.SetExcluded(miningprofitgeneral.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *MiningProfitGeneralUpsert) AddCreatedAt(v uint32) *MiningProfitGeneralUpsert {
	u.Add(miningprofitgeneral.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MiningProfitGeneralUpsert) SetUpdatedAt(v uint32) *MiningProfitGeneralUpsert {
	u.Set(miningprofitgeneral.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MiningProfitGeneralUpsert) UpdateUpdatedAt() *MiningProfitGeneralUpsert {
	u.SetExcluded(miningprofitgeneral.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *MiningProfitGeneralUpsert) AddUpdatedAt(v uint32) *MiningProfitGeneralUpsert {
	u.Add(miningprofitgeneral.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MiningProfitGeneralUpsert) SetDeletedAt(v uint32) *MiningProfitGeneralUpsert {
	u.Set(miningprofitgeneral.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MiningProfitGeneralUpsert) UpdateDeletedAt() *MiningProfitGeneralUpsert {
	u.SetExcluded(miningprofitgeneral.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *MiningProfitGeneralUpsert) AddDeletedAt(v uint32) *MiningProfitGeneralUpsert {
	u.Add(miningprofitgeneral.FieldDeletedAt, v)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *MiningProfitGeneralUpsert) SetGoodID(v uuid.UUID) *MiningProfitGeneralUpsert {
	u.Set(miningprofitgeneral.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *MiningProfitGeneralUpsert) UpdateGoodID() *MiningProfitGeneralUpsert {
	u.SetExcluded(miningprofitgeneral.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *MiningProfitGeneralUpsert) ClearGoodID() *MiningProfitGeneralUpsert {
	u.SetNull(miningprofitgeneral.FieldGoodID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *MiningProfitGeneralUpsert) SetCoinTypeID(v uuid.UUID) *MiningProfitGeneralUpsert {
	u.Set(miningprofitgeneral.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *MiningProfitGeneralUpsert) UpdateCoinTypeID() *MiningProfitGeneralUpsert {
	u.SetExcluded(miningprofitgeneral.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *MiningProfitGeneralUpsert) ClearCoinTypeID() *MiningProfitGeneralUpsert {
	u.SetNull(miningprofitgeneral.FieldCoinTypeID)
	return u
}

// SetAmount sets the "amount" field.
func (u *MiningProfitGeneralUpsert) SetAmount(v decimal.Decimal) *MiningProfitGeneralUpsert {
	u.Set(miningprofitgeneral.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *MiningProfitGeneralUpsert) UpdateAmount() *MiningProfitGeneralUpsert {
	u.SetExcluded(miningprofitgeneral.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *MiningProfitGeneralUpsert) AddAmount(v decimal.Decimal) *MiningProfitGeneralUpsert {
	u.Add(miningprofitgeneral.FieldAmount, v)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *MiningProfitGeneralUpsert) ClearAmount() *MiningProfitGeneralUpsert {
	u.SetNull(miningprofitgeneral.FieldAmount)
	return u
}

// SetToPlatform sets the "to_platform" field.
func (u *MiningProfitGeneralUpsert) SetToPlatform(v decimal.Decimal) *MiningProfitGeneralUpsert {
	u.Set(miningprofitgeneral.FieldToPlatform, v)
	return u
}

// UpdateToPlatform sets the "to_platform" field to the value that was provided on create.
func (u *MiningProfitGeneralUpsert) UpdateToPlatform() *MiningProfitGeneralUpsert {
	u.SetExcluded(miningprofitgeneral.FieldToPlatform)
	return u
}

// AddToPlatform adds v to the "to_platform" field.
func (u *MiningProfitGeneralUpsert) AddToPlatform(v decimal.Decimal) *MiningProfitGeneralUpsert {
	u.Add(miningprofitgeneral.FieldToPlatform, v)
	return u
}

// ClearToPlatform clears the value of the "to_platform" field.
func (u *MiningProfitGeneralUpsert) ClearToPlatform() *MiningProfitGeneralUpsert {
	u.SetNull(miningprofitgeneral.FieldToPlatform)
	return u
}

// SetToUser sets the "to_user" field.
func (u *MiningProfitGeneralUpsert) SetToUser(v decimal.Decimal) *MiningProfitGeneralUpsert {
	u.Set(miningprofitgeneral.FieldToUser, v)
	return u
}

// UpdateToUser sets the "to_user" field to the value that was provided on create.
func (u *MiningProfitGeneralUpsert) UpdateToUser() *MiningProfitGeneralUpsert {
	u.SetExcluded(miningprofitgeneral.FieldToUser)
	return u
}

// AddToUser adds v to the "to_user" field.
func (u *MiningProfitGeneralUpsert) AddToUser(v decimal.Decimal) *MiningProfitGeneralUpsert {
	u.Add(miningprofitgeneral.FieldToUser, v)
	return u
}

// ClearToUser clears the value of the "to_user" field.
func (u *MiningProfitGeneralUpsert) ClearToUser() *MiningProfitGeneralUpsert {
	u.SetNull(miningprofitgeneral.FieldToUser)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MiningProfitGeneral.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(miningprofitgeneral.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *MiningProfitGeneralUpsertOne) UpdateNewValues() *MiningProfitGeneralUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(miningprofitgeneral.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.MiningProfitGeneral.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *MiningProfitGeneralUpsertOne) Ignore() *MiningProfitGeneralUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MiningProfitGeneralUpsertOne) DoNothing() *MiningProfitGeneralUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MiningProfitGeneralCreate.OnConflict
// documentation for more info.
func (u *MiningProfitGeneralUpsertOne) Update(set func(*MiningProfitGeneralUpsert)) *MiningProfitGeneralUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MiningProfitGeneralUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *MiningProfitGeneralUpsertOne) SetCreatedAt(v uint32) *MiningProfitGeneralUpsertOne {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *MiningProfitGeneralUpsertOne) AddCreatedAt(v uint32) *MiningProfitGeneralUpsertOne {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MiningProfitGeneralUpsertOne) UpdateCreatedAt() *MiningProfitGeneralUpsertOne {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MiningProfitGeneralUpsertOne) SetUpdatedAt(v uint32) *MiningProfitGeneralUpsertOne {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *MiningProfitGeneralUpsertOne) AddUpdatedAt(v uint32) *MiningProfitGeneralUpsertOne {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MiningProfitGeneralUpsertOne) UpdateUpdatedAt() *MiningProfitGeneralUpsertOne {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MiningProfitGeneralUpsertOne) SetDeletedAt(v uint32) *MiningProfitGeneralUpsertOne {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *MiningProfitGeneralUpsertOne) AddDeletedAt(v uint32) *MiningProfitGeneralUpsertOne {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MiningProfitGeneralUpsertOne) UpdateDeletedAt() *MiningProfitGeneralUpsertOne {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetGoodID sets the "good_id" field.
func (u *MiningProfitGeneralUpsertOne) SetGoodID(v uuid.UUID) *MiningProfitGeneralUpsertOne {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *MiningProfitGeneralUpsertOne) UpdateGoodID() *MiningProfitGeneralUpsertOne {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *MiningProfitGeneralUpsertOne) ClearGoodID() *MiningProfitGeneralUpsertOne {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.ClearGoodID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *MiningProfitGeneralUpsertOne) SetCoinTypeID(v uuid.UUID) *MiningProfitGeneralUpsertOne {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *MiningProfitGeneralUpsertOne) UpdateCoinTypeID() *MiningProfitGeneralUpsertOne {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *MiningProfitGeneralUpsertOne) ClearCoinTypeID() *MiningProfitGeneralUpsertOne {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAmount sets the "amount" field.
func (u *MiningProfitGeneralUpsertOne) SetAmount(v decimal.Decimal) *MiningProfitGeneralUpsertOne {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *MiningProfitGeneralUpsertOne) AddAmount(v decimal.Decimal) *MiningProfitGeneralUpsertOne {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *MiningProfitGeneralUpsertOne) UpdateAmount() *MiningProfitGeneralUpsertOne {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *MiningProfitGeneralUpsertOne) ClearAmount() *MiningProfitGeneralUpsertOne {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.ClearAmount()
	})
}

// SetToPlatform sets the "to_platform" field.
func (u *MiningProfitGeneralUpsertOne) SetToPlatform(v decimal.Decimal) *MiningProfitGeneralUpsertOne {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.SetToPlatform(v)
	})
}

// AddToPlatform adds v to the "to_platform" field.
func (u *MiningProfitGeneralUpsertOne) AddToPlatform(v decimal.Decimal) *MiningProfitGeneralUpsertOne {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.AddToPlatform(v)
	})
}

// UpdateToPlatform sets the "to_platform" field to the value that was provided on create.
func (u *MiningProfitGeneralUpsertOne) UpdateToPlatform() *MiningProfitGeneralUpsertOne {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.UpdateToPlatform()
	})
}

// ClearToPlatform clears the value of the "to_platform" field.
func (u *MiningProfitGeneralUpsertOne) ClearToPlatform() *MiningProfitGeneralUpsertOne {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.ClearToPlatform()
	})
}

// SetToUser sets the "to_user" field.
func (u *MiningProfitGeneralUpsertOne) SetToUser(v decimal.Decimal) *MiningProfitGeneralUpsertOne {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.SetToUser(v)
	})
}

// AddToUser adds v to the "to_user" field.
func (u *MiningProfitGeneralUpsertOne) AddToUser(v decimal.Decimal) *MiningProfitGeneralUpsertOne {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.AddToUser(v)
	})
}

// UpdateToUser sets the "to_user" field to the value that was provided on create.
func (u *MiningProfitGeneralUpsertOne) UpdateToUser() *MiningProfitGeneralUpsertOne {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.UpdateToUser()
	})
}

// ClearToUser clears the value of the "to_user" field.
func (u *MiningProfitGeneralUpsertOne) ClearToUser() *MiningProfitGeneralUpsertOne {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.ClearToUser()
	})
}

// Exec executes the query.
func (u *MiningProfitGeneralUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MiningProfitGeneralCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MiningProfitGeneralUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MiningProfitGeneralUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MiningProfitGeneralUpsertOne.ID is not supported by MySQL driver. Use MiningProfitGeneralUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MiningProfitGeneralUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MiningProfitGeneralCreateBulk is the builder for creating many MiningProfitGeneral entities in bulk.
type MiningProfitGeneralCreateBulk struct {
	config
	builders []*MiningProfitGeneralCreate
	conflict []sql.ConflictOption
}

// Save creates the MiningProfitGeneral entities in the database.
func (mpgcb *MiningProfitGeneralCreateBulk) Save(ctx context.Context) ([]*MiningProfitGeneral, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mpgcb.builders))
	nodes := make([]*MiningProfitGeneral, len(mpgcb.builders))
	mutators := make([]Mutator, len(mpgcb.builders))
	for i := range mpgcb.builders {
		func(i int, root context.Context) {
			builder := mpgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MiningProfitGeneralMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mpgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mpgcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mpgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mpgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mpgcb *MiningProfitGeneralCreateBulk) SaveX(ctx context.Context) []*MiningProfitGeneral {
	v, err := mpgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpgcb *MiningProfitGeneralCreateBulk) Exec(ctx context.Context) error {
	_, err := mpgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpgcb *MiningProfitGeneralCreateBulk) ExecX(ctx context.Context) {
	if err := mpgcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MiningProfitGeneral.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MiningProfitGeneralUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (mpgcb *MiningProfitGeneralCreateBulk) OnConflict(opts ...sql.ConflictOption) *MiningProfitGeneralUpsertBulk {
	mpgcb.conflict = opts
	return &MiningProfitGeneralUpsertBulk{
		create: mpgcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MiningProfitGeneral.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (mpgcb *MiningProfitGeneralCreateBulk) OnConflictColumns(columns ...string) *MiningProfitGeneralUpsertBulk {
	mpgcb.conflict = append(mpgcb.conflict, sql.ConflictColumns(columns...))
	return &MiningProfitGeneralUpsertBulk{
		create: mpgcb,
	}
}

// MiningProfitGeneralUpsertBulk is the builder for "upsert"-ing
// a bulk of MiningProfitGeneral nodes.
type MiningProfitGeneralUpsertBulk struct {
	create *MiningProfitGeneralCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MiningProfitGeneral.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(miningprofitgeneral.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *MiningProfitGeneralUpsertBulk) UpdateNewValues() *MiningProfitGeneralUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(miningprofitgeneral.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MiningProfitGeneral.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *MiningProfitGeneralUpsertBulk) Ignore() *MiningProfitGeneralUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MiningProfitGeneralUpsertBulk) DoNothing() *MiningProfitGeneralUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MiningProfitGeneralCreateBulk.OnConflict
// documentation for more info.
func (u *MiningProfitGeneralUpsertBulk) Update(set func(*MiningProfitGeneralUpsert)) *MiningProfitGeneralUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MiningProfitGeneralUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *MiningProfitGeneralUpsertBulk) SetCreatedAt(v uint32) *MiningProfitGeneralUpsertBulk {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *MiningProfitGeneralUpsertBulk) AddCreatedAt(v uint32) *MiningProfitGeneralUpsertBulk {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MiningProfitGeneralUpsertBulk) UpdateCreatedAt() *MiningProfitGeneralUpsertBulk {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MiningProfitGeneralUpsertBulk) SetUpdatedAt(v uint32) *MiningProfitGeneralUpsertBulk {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *MiningProfitGeneralUpsertBulk) AddUpdatedAt(v uint32) *MiningProfitGeneralUpsertBulk {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MiningProfitGeneralUpsertBulk) UpdateUpdatedAt() *MiningProfitGeneralUpsertBulk {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MiningProfitGeneralUpsertBulk) SetDeletedAt(v uint32) *MiningProfitGeneralUpsertBulk {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *MiningProfitGeneralUpsertBulk) AddDeletedAt(v uint32) *MiningProfitGeneralUpsertBulk {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MiningProfitGeneralUpsertBulk) UpdateDeletedAt() *MiningProfitGeneralUpsertBulk {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetGoodID sets the "good_id" field.
func (u *MiningProfitGeneralUpsertBulk) SetGoodID(v uuid.UUID) *MiningProfitGeneralUpsertBulk {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *MiningProfitGeneralUpsertBulk) UpdateGoodID() *MiningProfitGeneralUpsertBulk {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *MiningProfitGeneralUpsertBulk) ClearGoodID() *MiningProfitGeneralUpsertBulk {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.ClearGoodID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *MiningProfitGeneralUpsertBulk) SetCoinTypeID(v uuid.UUID) *MiningProfitGeneralUpsertBulk {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *MiningProfitGeneralUpsertBulk) UpdateCoinTypeID() *MiningProfitGeneralUpsertBulk {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *MiningProfitGeneralUpsertBulk) ClearCoinTypeID() *MiningProfitGeneralUpsertBulk {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAmount sets the "amount" field.
func (u *MiningProfitGeneralUpsertBulk) SetAmount(v decimal.Decimal) *MiningProfitGeneralUpsertBulk {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *MiningProfitGeneralUpsertBulk) AddAmount(v decimal.Decimal) *MiningProfitGeneralUpsertBulk {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *MiningProfitGeneralUpsertBulk) UpdateAmount() *MiningProfitGeneralUpsertBulk {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *MiningProfitGeneralUpsertBulk) ClearAmount() *MiningProfitGeneralUpsertBulk {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.ClearAmount()
	})
}

// SetToPlatform sets the "to_platform" field.
func (u *MiningProfitGeneralUpsertBulk) SetToPlatform(v decimal.Decimal) *MiningProfitGeneralUpsertBulk {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.SetToPlatform(v)
	})
}

// AddToPlatform adds v to the "to_platform" field.
func (u *MiningProfitGeneralUpsertBulk) AddToPlatform(v decimal.Decimal) *MiningProfitGeneralUpsertBulk {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.AddToPlatform(v)
	})
}

// UpdateToPlatform sets the "to_platform" field to the value that was provided on create.
func (u *MiningProfitGeneralUpsertBulk) UpdateToPlatform() *MiningProfitGeneralUpsertBulk {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.UpdateToPlatform()
	})
}

// ClearToPlatform clears the value of the "to_platform" field.
func (u *MiningProfitGeneralUpsertBulk) ClearToPlatform() *MiningProfitGeneralUpsertBulk {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.ClearToPlatform()
	})
}

// SetToUser sets the "to_user" field.
func (u *MiningProfitGeneralUpsertBulk) SetToUser(v decimal.Decimal) *MiningProfitGeneralUpsertBulk {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.SetToUser(v)
	})
}

// AddToUser adds v to the "to_user" field.
func (u *MiningProfitGeneralUpsertBulk) AddToUser(v decimal.Decimal) *MiningProfitGeneralUpsertBulk {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.AddToUser(v)
	})
}

// UpdateToUser sets the "to_user" field to the value that was provided on create.
func (u *MiningProfitGeneralUpsertBulk) UpdateToUser() *MiningProfitGeneralUpsertBulk {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.UpdateToUser()
	})
}

// ClearToUser clears the value of the "to_user" field.
func (u *MiningProfitGeneralUpsertBulk) ClearToUser() *MiningProfitGeneralUpsertBulk {
	return u.Update(func(s *MiningProfitGeneralUpsert) {
		s.ClearToUser()
	})
}

// Exec executes the query.
func (u *MiningProfitGeneralUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MiningProfitGeneralCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MiningProfitGeneralCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MiningProfitGeneralUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
