// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/ledger-manager/pkg/db/ent/miningprofitunsold"
	"github.com/NpoolPlatform/ledger-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// MiningProfitUnsoldUpdate is the builder for updating MiningProfitUnsold entities.
type MiningProfitUnsoldUpdate struct {
	config
	hooks     []Hook
	mutation  *MiningProfitUnsoldMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MiningProfitUnsoldUpdate builder.
func (mpuu *MiningProfitUnsoldUpdate) Where(ps ...predicate.MiningProfitUnsold) *MiningProfitUnsoldUpdate {
	mpuu.mutation.Where(ps...)
	return mpuu
}

// SetCreatedAt sets the "created_at" field.
func (mpuu *MiningProfitUnsoldUpdate) SetCreatedAt(u uint32) *MiningProfitUnsoldUpdate {
	mpuu.mutation.ResetCreatedAt()
	mpuu.mutation.SetCreatedAt(u)
	return mpuu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mpuu *MiningProfitUnsoldUpdate) SetNillableCreatedAt(u *uint32) *MiningProfitUnsoldUpdate {
	if u != nil {
		mpuu.SetCreatedAt(*u)
	}
	return mpuu
}

// AddCreatedAt adds u to the "created_at" field.
func (mpuu *MiningProfitUnsoldUpdate) AddCreatedAt(u int32) *MiningProfitUnsoldUpdate {
	mpuu.mutation.AddCreatedAt(u)
	return mpuu
}

// SetUpdatedAt sets the "updated_at" field.
func (mpuu *MiningProfitUnsoldUpdate) SetUpdatedAt(u uint32) *MiningProfitUnsoldUpdate {
	mpuu.mutation.ResetUpdatedAt()
	mpuu.mutation.SetUpdatedAt(u)
	return mpuu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (mpuu *MiningProfitUnsoldUpdate) AddUpdatedAt(u int32) *MiningProfitUnsoldUpdate {
	mpuu.mutation.AddUpdatedAt(u)
	return mpuu
}

// SetDeletedAt sets the "deleted_at" field.
func (mpuu *MiningProfitUnsoldUpdate) SetDeletedAt(u uint32) *MiningProfitUnsoldUpdate {
	mpuu.mutation.ResetDeletedAt()
	mpuu.mutation.SetDeletedAt(u)
	return mpuu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mpuu *MiningProfitUnsoldUpdate) SetNillableDeletedAt(u *uint32) *MiningProfitUnsoldUpdate {
	if u != nil {
		mpuu.SetDeletedAt(*u)
	}
	return mpuu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (mpuu *MiningProfitUnsoldUpdate) AddDeletedAt(u int32) *MiningProfitUnsoldUpdate {
	mpuu.mutation.AddDeletedAt(u)
	return mpuu
}

// SetGoodID sets the "good_id" field.
func (mpuu *MiningProfitUnsoldUpdate) SetGoodID(u uuid.UUID) *MiningProfitUnsoldUpdate {
	mpuu.mutation.SetGoodID(u)
	return mpuu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (mpuu *MiningProfitUnsoldUpdate) SetNillableGoodID(u *uuid.UUID) *MiningProfitUnsoldUpdate {
	if u != nil {
		mpuu.SetGoodID(*u)
	}
	return mpuu
}

// ClearGoodID clears the value of the "good_id" field.
func (mpuu *MiningProfitUnsoldUpdate) ClearGoodID() *MiningProfitUnsoldUpdate {
	mpuu.mutation.ClearGoodID()
	return mpuu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (mpuu *MiningProfitUnsoldUpdate) SetCoinTypeID(u uuid.UUID) *MiningProfitUnsoldUpdate {
	mpuu.mutation.SetCoinTypeID(u)
	return mpuu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (mpuu *MiningProfitUnsoldUpdate) SetNillableCoinTypeID(u *uuid.UUID) *MiningProfitUnsoldUpdate {
	if u != nil {
		mpuu.SetCoinTypeID(*u)
	}
	return mpuu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (mpuu *MiningProfitUnsoldUpdate) ClearCoinTypeID() *MiningProfitUnsoldUpdate {
	mpuu.mutation.ClearCoinTypeID()
	return mpuu
}

// SetAmount sets the "amount" field.
func (mpuu *MiningProfitUnsoldUpdate) SetAmount(d decimal.Decimal) *MiningProfitUnsoldUpdate {
	mpuu.mutation.ResetAmount()
	mpuu.mutation.SetAmount(d)
	return mpuu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (mpuu *MiningProfitUnsoldUpdate) SetNillableAmount(d *decimal.Decimal) *MiningProfitUnsoldUpdate {
	if d != nil {
		mpuu.SetAmount(*d)
	}
	return mpuu
}

// AddAmount adds d to the "amount" field.
func (mpuu *MiningProfitUnsoldUpdate) AddAmount(d decimal.Decimal) *MiningProfitUnsoldUpdate {
	mpuu.mutation.AddAmount(d)
	return mpuu
}

// ClearAmount clears the value of the "amount" field.
func (mpuu *MiningProfitUnsoldUpdate) ClearAmount() *MiningProfitUnsoldUpdate {
	mpuu.mutation.ClearAmount()
	return mpuu
}

// SetBenefitDate sets the "benefit_date" field.
func (mpuu *MiningProfitUnsoldUpdate) SetBenefitDate(u uint32) *MiningProfitUnsoldUpdate {
	mpuu.mutation.ResetBenefitDate()
	mpuu.mutation.SetBenefitDate(u)
	return mpuu
}

// SetNillableBenefitDate sets the "benefit_date" field if the given value is not nil.
func (mpuu *MiningProfitUnsoldUpdate) SetNillableBenefitDate(u *uint32) *MiningProfitUnsoldUpdate {
	if u != nil {
		mpuu.SetBenefitDate(*u)
	}
	return mpuu
}

// AddBenefitDate adds u to the "benefit_date" field.
func (mpuu *MiningProfitUnsoldUpdate) AddBenefitDate(u int32) *MiningProfitUnsoldUpdate {
	mpuu.mutation.AddBenefitDate(u)
	return mpuu
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (mpuu *MiningProfitUnsoldUpdate) ClearBenefitDate() *MiningProfitUnsoldUpdate {
	mpuu.mutation.ClearBenefitDate()
	return mpuu
}

// Mutation returns the MiningProfitUnsoldMutation object of the builder.
func (mpuu *MiningProfitUnsoldUpdate) Mutation() *MiningProfitUnsoldMutation {
	return mpuu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mpuu *MiningProfitUnsoldUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := mpuu.defaults(); err != nil {
		return 0, err
	}
	if len(mpuu.hooks) == 0 {
		affected, err = mpuu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MiningProfitUnsoldMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mpuu.mutation = mutation
			affected, err = mpuu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mpuu.hooks) - 1; i >= 0; i-- {
			if mpuu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mpuu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mpuu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mpuu *MiningProfitUnsoldUpdate) SaveX(ctx context.Context) int {
	affected, err := mpuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mpuu *MiningProfitUnsoldUpdate) Exec(ctx context.Context) error {
	_, err := mpuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpuu *MiningProfitUnsoldUpdate) ExecX(ctx context.Context) {
	if err := mpuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpuu *MiningProfitUnsoldUpdate) defaults() error {
	if _, ok := mpuu.mutation.UpdatedAt(); !ok {
		if miningprofitunsold.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized miningprofitunsold.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := miningprofitunsold.UpdateDefaultUpdatedAt()
		mpuu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mpuu *MiningProfitUnsoldUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MiningProfitUnsoldUpdate {
	mpuu.modifiers = append(mpuu.modifiers, modifiers...)
	return mpuu
}

func (mpuu *MiningProfitUnsoldUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   miningprofitunsold.Table,
			Columns: miningprofitunsold.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: miningprofitunsold.FieldID,
			},
		},
	}
	if ps := mpuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpuu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitunsold.FieldCreatedAt,
		})
	}
	if value, ok := mpuu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitunsold.FieldCreatedAt,
		})
	}
	if value, ok := mpuu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitunsold.FieldUpdatedAt,
		})
	}
	if value, ok := mpuu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitunsold.FieldUpdatedAt,
		})
	}
	if value, ok := mpuu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitunsold.FieldDeletedAt,
		})
	}
	if value, ok := mpuu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitunsold.FieldDeletedAt,
		})
	}
	if value, ok := mpuu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: miningprofitunsold.FieldGoodID,
		})
	}
	if mpuu.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: miningprofitunsold.FieldGoodID,
		})
	}
	if value, ok := mpuu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: miningprofitunsold.FieldCoinTypeID,
		})
	}
	if mpuu.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: miningprofitunsold.FieldCoinTypeID,
		})
	}
	if value, ok := mpuu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: miningprofitunsold.FieldAmount,
		})
	}
	if value, ok := mpuu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: miningprofitunsold.FieldAmount,
		})
	}
	if mpuu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: miningprofitunsold.FieldAmount,
		})
	}
	if value, ok := mpuu.mutation.BenefitDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitunsold.FieldBenefitDate,
		})
	}
	if value, ok := mpuu.mutation.AddedBenefitDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitunsold.FieldBenefitDate,
		})
	}
	if mpuu.mutation.BenefitDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: miningprofitunsold.FieldBenefitDate,
		})
	}
	_spec.Modifiers = mpuu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, mpuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{miningprofitunsold.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// MiningProfitUnsoldUpdateOne is the builder for updating a single MiningProfitUnsold entity.
type MiningProfitUnsoldUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MiningProfitUnsoldMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (mpuuo *MiningProfitUnsoldUpdateOne) SetCreatedAt(u uint32) *MiningProfitUnsoldUpdateOne {
	mpuuo.mutation.ResetCreatedAt()
	mpuuo.mutation.SetCreatedAt(u)
	return mpuuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mpuuo *MiningProfitUnsoldUpdateOne) SetNillableCreatedAt(u *uint32) *MiningProfitUnsoldUpdateOne {
	if u != nil {
		mpuuo.SetCreatedAt(*u)
	}
	return mpuuo
}

// AddCreatedAt adds u to the "created_at" field.
func (mpuuo *MiningProfitUnsoldUpdateOne) AddCreatedAt(u int32) *MiningProfitUnsoldUpdateOne {
	mpuuo.mutation.AddCreatedAt(u)
	return mpuuo
}

// SetUpdatedAt sets the "updated_at" field.
func (mpuuo *MiningProfitUnsoldUpdateOne) SetUpdatedAt(u uint32) *MiningProfitUnsoldUpdateOne {
	mpuuo.mutation.ResetUpdatedAt()
	mpuuo.mutation.SetUpdatedAt(u)
	return mpuuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (mpuuo *MiningProfitUnsoldUpdateOne) AddUpdatedAt(u int32) *MiningProfitUnsoldUpdateOne {
	mpuuo.mutation.AddUpdatedAt(u)
	return mpuuo
}

// SetDeletedAt sets the "deleted_at" field.
func (mpuuo *MiningProfitUnsoldUpdateOne) SetDeletedAt(u uint32) *MiningProfitUnsoldUpdateOne {
	mpuuo.mutation.ResetDeletedAt()
	mpuuo.mutation.SetDeletedAt(u)
	return mpuuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mpuuo *MiningProfitUnsoldUpdateOne) SetNillableDeletedAt(u *uint32) *MiningProfitUnsoldUpdateOne {
	if u != nil {
		mpuuo.SetDeletedAt(*u)
	}
	return mpuuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (mpuuo *MiningProfitUnsoldUpdateOne) AddDeletedAt(u int32) *MiningProfitUnsoldUpdateOne {
	mpuuo.mutation.AddDeletedAt(u)
	return mpuuo
}

// SetGoodID sets the "good_id" field.
func (mpuuo *MiningProfitUnsoldUpdateOne) SetGoodID(u uuid.UUID) *MiningProfitUnsoldUpdateOne {
	mpuuo.mutation.SetGoodID(u)
	return mpuuo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (mpuuo *MiningProfitUnsoldUpdateOne) SetNillableGoodID(u *uuid.UUID) *MiningProfitUnsoldUpdateOne {
	if u != nil {
		mpuuo.SetGoodID(*u)
	}
	return mpuuo
}

// ClearGoodID clears the value of the "good_id" field.
func (mpuuo *MiningProfitUnsoldUpdateOne) ClearGoodID() *MiningProfitUnsoldUpdateOne {
	mpuuo.mutation.ClearGoodID()
	return mpuuo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (mpuuo *MiningProfitUnsoldUpdateOne) SetCoinTypeID(u uuid.UUID) *MiningProfitUnsoldUpdateOne {
	mpuuo.mutation.SetCoinTypeID(u)
	return mpuuo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (mpuuo *MiningProfitUnsoldUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *MiningProfitUnsoldUpdateOne {
	if u != nil {
		mpuuo.SetCoinTypeID(*u)
	}
	return mpuuo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (mpuuo *MiningProfitUnsoldUpdateOne) ClearCoinTypeID() *MiningProfitUnsoldUpdateOne {
	mpuuo.mutation.ClearCoinTypeID()
	return mpuuo
}

// SetAmount sets the "amount" field.
func (mpuuo *MiningProfitUnsoldUpdateOne) SetAmount(d decimal.Decimal) *MiningProfitUnsoldUpdateOne {
	mpuuo.mutation.ResetAmount()
	mpuuo.mutation.SetAmount(d)
	return mpuuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (mpuuo *MiningProfitUnsoldUpdateOne) SetNillableAmount(d *decimal.Decimal) *MiningProfitUnsoldUpdateOne {
	if d != nil {
		mpuuo.SetAmount(*d)
	}
	return mpuuo
}

// AddAmount adds d to the "amount" field.
func (mpuuo *MiningProfitUnsoldUpdateOne) AddAmount(d decimal.Decimal) *MiningProfitUnsoldUpdateOne {
	mpuuo.mutation.AddAmount(d)
	return mpuuo
}

// ClearAmount clears the value of the "amount" field.
func (mpuuo *MiningProfitUnsoldUpdateOne) ClearAmount() *MiningProfitUnsoldUpdateOne {
	mpuuo.mutation.ClearAmount()
	return mpuuo
}

// SetBenefitDate sets the "benefit_date" field.
func (mpuuo *MiningProfitUnsoldUpdateOne) SetBenefitDate(u uint32) *MiningProfitUnsoldUpdateOne {
	mpuuo.mutation.ResetBenefitDate()
	mpuuo.mutation.SetBenefitDate(u)
	return mpuuo
}

// SetNillableBenefitDate sets the "benefit_date" field if the given value is not nil.
func (mpuuo *MiningProfitUnsoldUpdateOne) SetNillableBenefitDate(u *uint32) *MiningProfitUnsoldUpdateOne {
	if u != nil {
		mpuuo.SetBenefitDate(*u)
	}
	return mpuuo
}

// AddBenefitDate adds u to the "benefit_date" field.
func (mpuuo *MiningProfitUnsoldUpdateOne) AddBenefitDate(u int32) *MiningProfitUnsoldUpdateOne {
	mpuuo.mutation.AddBenefitDate(u)
	return mpuuo
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (mpuuo *MiningProfitUnsoldUpdateOne) ClearBenefitDate() *MiningProfitUnsoldUpdateOne {
	mpuuo.mutation.ClearBenefitDate()
	return mpuuo
}

// Mutation returns the MiningProfitUnsoldMutation object of the builder.
func (mpuuo *MiningProfitUnsoldUpdateOne) Mutation() *MiningProfitUnsoldMutation {
	return mpuuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mpuuo *MiningProfitUnsoldUpdateOne) Select(field string, fields ...string) *MiningProfitUnsoldUpdateOne {
	mpuuo.fields = append([]string{field}, fields...)
	return mpuuo
}

// Save executes the query and returns the updated MiningProfitUnsold entity.
func (mpuuo *MiningProfitUnsoldUpdateOne) Save(ctx context.Context) (*MiningProfitUnsold, error) {
	var (
		err  error
		node *MiningProfitUnsold
	)
	if err := mpuuo.defaults(); err != nil {
		return nil, err
	}
	if len(mpuuo.hooks) == 0 {
		node, err = mpuuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MiningProfitUnsoldMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mpuuo.mutation = mutation
			node, err = mpuuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mpuuo.hooks) - 1; i >= 0; i-- {
			if mpuuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mpuuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mpuuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*MiningProfitUnsold)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MiningProfitUnsoldMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mpuuo *MiningProfitUnsoldUpdateOne) SaveX(ctx context.Context) *MiningProfitUnsold {
	node, err := mpuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mpuuo *MiningProfitUnsoldUpdateOne) Exec(ctx context.Context) error {
	_, err := mpuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpuuo *MiningProfitUnsoldUpdateOne) ExecX(ctx context.Context) {
	if err := mpuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpuuo *MiningProfitUnsoldUpdateOne) defaults() error {
	if _, ok := mpuuo.mutation.UpdatedAt(); !ok {
		if miningprofitunsold.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized miningprofitunsold.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := miningprofitunsold.UpdateDefaultUpdatedAt()
		mpuuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mpuuo *MiningProfitUnsoldUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MiningProfitUnsoldUpdateOne {
	mpuuo.modifiers = append(mpuuo.modifiers, modifiers...)
	return mpuuo
}

func (mpuuo *MiningProfitUnsoldUpdateOne) sqlSave(ctx context.Context) (_node *MiningProfitUnsold, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   miningprofitunsold.Table,
			Columns: miningprofitunsold.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: miningprofitunsold.FieldID,
			},
		},
	}
	id, ok := mpuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MiningProfitUnsold.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mpuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, miningprofitunsold.FieldID)
		for _, f := range fields {
			if !miningprofitunsold.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != miningprofitunsold.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mpuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpuuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitunsold.FieldCreatedAt,
		})
	}
	if value, ok := mpuuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitunsold.FieldCreatedAt,
		})
	}
	if value, ok := mpuuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitunsold.FieldUpdatedAt,
		})
	}
	if value, ok := mpuuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitunsold.FieldUpdatedAt,
		})
	}
	if value, ok := mpuuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitunsold.FieldDeletedAt,
		})
	}
	if value, ok := mpuuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitunsold.FieldDeletedAt,
		})
	}
	if value, ok := mpuuo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: miningprofitunsold.FieldGoodID,
		})
	}
	if mpuuo.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: miningprofitunsold.FieldGoodID,
		})
	}
	if value, ok := mpuuo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: miningprofitunsold.FieldCoinTypeID,
		})
	}
	if mpuuo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: miningprofitunsold.FieldCoinTypeID,
		})
	}
	if value, ok := mpuuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: miningprofitunsold.FieldAmount,
		})
	}
	if value, ok := mpuuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: miningprofitunsold.FieldAmount,
		})
	}
	if mpuuo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: miningprofitunsold.FieldAmount,
		})
	}
	if value, ok := mpuuo.mutation.BenefitDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitunsold.FieldBenefitDate,
		})
	}
	if value, ok := mpuuo.mutation.AddedBenefitDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitunsold.FieldBenefitDate,
		})
	}
	if mpuuo.mutation.BenefitDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: miningprofitunsold.FieldBenefitDate,
		})
	}
	_spec.Modifiers = mpuuo.modifiers
	_node = &MiningProfitUnsold{config: mpuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mpuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{miningprofitunsold.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
