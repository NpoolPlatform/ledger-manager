// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/ledger-manager/pkg/db/ent/miningprofitgeneral"
	"github.com/NpoolPlatform/ledger-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// MiningProfitGeneralUpdate is the builder for updating MiningProfitGeneral entities.
type MiningProfitGeneralUpdate struct {
	config
	hooks     []Hook
	mutation  *MiningProfitGeneralMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MiningProfitGeneralUpdate builder.
func (mpgu *MiningProfitGeneralUpdate) Where(ps ...predicate.MiningProfitGeneral) *MiningProfitGeneralUpdate {
	mpgu.mutation.Where(ps...)
	return mpgu
}

// SetCreatedAt sets the "created_at" field.
func (mpgu *MiningProfitGeneralUpdate) SetCreatedAt(u uint32) *MiningProfitGeneralUpdate {
	mpgu.mutation.ResetCreatedAt()
	mpgu.mutation.SetCreatedAt(u)
	return mpgu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mpgu *MiningProfitGeneralUpdate) SetNillableCreatedAt(u *uint32) *MiningProfitGeneralUpdate {
	if u != nil {
		mpgu.SetCreatedAt(*u)
	}
	return mpgu
}

// AddCreatedAt adds u to the "created_at" field.
func (mpgu *MiningProfitGeneralUpdate) AddCreatedAt(u int32) *MiningProfitGeneralUpdate {
	mpgu.mutation.AddCreatedAt(u)
	return mpgu
}

// SetUpdatedAt sets the "updated_at" field.
func (mpgu *MiningProfitGeneralUpdate) SetUpdatedAt(u uint32) *MiningProfitGeneralUpdate {
	mpgu.mutation.ResetUpdatedAt()
	mpgu.mutation.SetUpdatedAt(u)
	return mpgu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (mpgu *MiningProfitGeneralUpdate) AddUpdatedAt(u int32) *MiningProfitGeneralUpdate {
	mpgu.mutation.AddUpdatedAt(u)
	return mpgu
}

// SetDeletedAt sets the "deleted_at" field.
func (mpgu *MiningProfitGeneralUpdate) SetDeletedAt(u uint32) *MiningProfitGeneralUpdate {
	mpgu.mutation.ResetDeletedAt()
	mpgu.mutation.SetDeletedAt(u)
	return mpgu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mpgu *MiningProfitGeneralUpdate) SetNillableDeletedAt(u *uint32) *MiningProfitGeneralUpdate {
	if u != nil {
		mpgu.SetDeletedAt(*u)
	}
	return mpgu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (mpgu *MiningProfitGeneralUpdate) AddDeletedAt(u int32) *MiningProfitGeneralUpdate {
	mpgu.mutation.AddDeletedAt(u)
	return mpgu
}

// SetGoodID sets the "good_id" field.
func (mpgu *MiningProfitGeneralUpdate) SetGoodID(u uuid.UUID) *MiningProfitGeneralUpdate {
	mpgu.mutation.SetGoodID(u)
	return mpgu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (mpgu *MiningProfitGeneralUpdate) SetNillableGoodID(u *uuid.UUID) *MiningProfitGeneralUpdate {
	if u != nil {
		mpgu.SetGoodID(*u)
	}
	return mpgu
}

// ClearGoodID clears the value of the "good_id" field.
func (mpgu *MiningProfitGeneralUpdate) ClearGoodID() *MiningProfitGeneralUpdate {
	mpgu.mutation.ClearGoodID()
	return mpgu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (mpgu *MiningProfitGeneralUpdate) SetCoinTypeID(u uuid.UUID) *MiningProfitGeneralUpdate {
	mpgu.mutation.SetCoinTypeID(u)
	return mpgu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (mpgu *MiningProfitGeneralUpdate) SetNillableCoinTypeID(u *uuid.UUID) *MiningProfitGeneralUpdate {
	if u != nil {
		mpgu.SetCoinTypeID(*u)
	}
	return mpgu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (mpgu *MiningProfitGeneralUpdate) ClearCoinTypeID() *MiningProfitGeneralUpdate {
	mpgu.mutation.ClearCoinTypeID()
	return mpgu
}

// SetAmount sets the "amount" field.
func (mpgu *MiningProfitGeneralUpdate) SetAmount(d decimal.Decimal) *MiningProfitGeneralUpdate {
	mpgu.mutation.ResetAmount()
	mpgu.mutation.SetAmount(d)
	return mpgu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (mpgu *MiningProfitGeneralUpdate) SetNillableAmount(d *decimal.Decimal) *MiningProfitGeneralUpdate {
	if d != nil {
		mpgu.SetAmount(*d)
	}
	return mpgu
}

// AddAmount adds d to the "amount" field.
func (mpgu *MiningProfitGeneralUpdate) AddAmount(d decimal.Decimal) *MiningProfitGeneralUpdate {
	mpgu.mutation.AddAmount(d)
	return mpgu
}

// ClearAmount clears the value of the "amount" field.
func (mpgu *MiningProfitGeneralUpdate) ClearAmount() *MiningProfitGeneralUpdate {
	mpgu.mutation.ClearAmount()
	return mpgu
}

// SetToPlatform sets the "to_platform" field.
func (mpgu *MiningProfitGeneralUpdate) SetToPlatform(d decimal.Decimal) *MiningProfitGeneralUpdate {
	mpgu.mutation.ResetToPlatform()
	mpgu.mutation.SetToPlatform(d)
	return mpgu
}

// SetNillableToPlatform sets the "to_platform" field if the given value is not nil.
func (mpgu *MiningProfitGeneralUpdate) SetNillableToPlatform(d *decimal.Decimal) *MiningProfitGeneralUpdate {
	if d != nil {
		mpgu.SetToPlatform(*d)
	}
	return mpgu
}

// AddToPlatform adds d to the "to_platform" field.
func (mpgu *MiningProfitGeneralUpdate) AddToPlatform(d decimal.Decimal) *MiningProfitGeneralUpdate {
	mpgu.mutation.AddToPlatform(d)
	return mpgu
}

// ClearToPlatform clears the value of the "to_platform" field.
func (mpgu *MiningProfitGeneralUpdate) ClearToPlatform() *MiningProfitGeneralUpdate {
	mpgu.mutation.ClearToPlatform()
	return mpgu
}

// SetToUser sets the "to_user" field.
func (mpgu *MiningProfitGeneralUpdate) SetToUser(d decimal.Decimal) *MiningProfitGeneralUpdate {
	mpgu.mutation.ResetToUser()
	mpgu.mutation.SetToUser(d)
	return mpgu
}

// SetNillableToUser sets the "to_user" field if the given value is not nil.
func (mpgu *MiningProfitGeneralUpdate) SetNillableToUser(d *decimal.Decimal) *MiningProfitGeneralUpdate {
	if d != nil {
		mpgu.SetToUser(*d)
	}
	return mpgu
}

// AddToUser adds d to the "to_user" field.
func (mpgu *MiningProfitGeneralUpdate) AddToUser(d decimal.Decimal) *MiningProfitGeneralUpdate {
	mpgu.mutation.AddToUser(d)
	return mpgu
}

// ClearToUser clears the value of the "to_user" field.
func (mpgu *MiningProfitGeneralUpdate) ClearToUser() *MiningProfitGeneralUpdate {
	mpgu.mutation.ClearToUser()
	return mpgu
}

// Mutation returns the MiningProfitGeneralMutation object of the builder.
func (mpgu *MiningProfitGeneralUpdate) Mutation() *MiningProfitGeneralMutation {
	return mpgu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mpgu *MiningProfitGeneralUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := mpgu.defaults(); err != nil {
		return 0, err
	}
	if len(mpgu.hooks) == 0 {
		affected, err = mpgu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MiningProfitGeneralMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mpgu.mutation = mutation
			affected, err = mpgu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mpgu.hooks) - 1; i >= 0; i-- {
			if mpgu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mpgu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mpgu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mpgu *MiningProfitGeneralUpdate) SaveX(ctx context.Context) int {
	affected, err := mpgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mpgu *MiningProfitGeneralUpdate) Exec(ctx context.Context) error {
	_, err := mpgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpgu *MiningProfitGeneralUpdate) ExecX(ctx context.Context) {
	if err := mpgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpgu *MiningProfitGeneralUpdate) defaults() error {
	if _, ok := mpgu.mutation.UpdatedAt(); !ok {
		if miningprofitgeneral.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized miningprofitgeneral.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := miningprofitgeneral.UpdateDefaultUpdatedAt()
		mpgu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mpgu *MiningProfitGeneralUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MiningProfitGeneralUpdate {
	mpgu.modifiers = append(mpgu.modifiers, modifiers...)
	return mpgu
}

func (mpgu *MiningProfitGeneralUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   miningprofitgeneral.Table,
			Columns: miningprofitgeneral.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: miningprofitgeneral.FieldID,
			},
		},
	}
	if ps := mpgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpgu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitgeneral.FieldCreatedAt,
		})
	}
	if value, ok := mpgu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitgeneral.FieldCreatedAt,
		})
	}
	if value, ok := mpgu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitgeneral.FieldUpdatedAt,
		})
	}
	if value, ok := mpgu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitgeneral.FieldUpdatedAt,
		})
	}
	if value, ok := mpgu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitgeneral.FieldDeletedAt,
		})
	}
	if value, ok := mpgu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitgeneral.FieldDeletedAt,
		})
	}
	if value, ok := mpgu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: miningprofitgeneral.FieldGoodID,
		})
	}
	if mpgu.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: miningprofitgeneral.FieldGoodID,
		})
	}
	if value, ok := mpgu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: miningprofitgeneral.FieldCoinTypeID,
		})
	}
	if mpgu.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: miningprofitgeneral.FieldCoinTypeID,
		})
	}
	if value, ok := mpgu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: miningprofitgeneral.FieldAmount,
		})
	}
	if value, ok := mpgu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: miningprofitgeneral.FieldAmount,
		})
	}
	if mpgu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: miningprofitgeneral.FieldAmount,
		})
	}
	if value, ok := mpgu.mutation.ToPlatform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: miningprofitgeneral.FieldToPlatform,
		})
	}
	if value, ok := mpgu.mutation.AddedToPlatform(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: miningprofitgeneral.FieldToPlatform,
		})
	}
	if mpgu.mutation.ToPlatformCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: miningprofitgeneral.FieldToPlatform,
		})
	}
	if value, ok := mpgu.mutation.ToUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: miningprofitgeneral.FieldToUser,
		})
	}
	if value, ok := mpgu.mutation.AddedToUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: miningprofitgeneral.FieldToUser,
		})
	}
	if mpgu.mutation.ToUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: miningprofitgeneral.FieldToUser,
		})
	}
	_spec.Modifiers = mpgu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, mpgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{miningprofitgeneral.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// MiningProfitGeneralUpdateOne is the builder for updating a single MiningProfitGeneral entity.
type MiningProfitGeneralUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MiningProfitGeneralMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (mpguo *MiningProfitGeneralUpdateOne) SetCreatedAt(u uint32) *MiningProfitGeneralUpdateOne {
	mpguo.mutation.ResetCreatedAt()
	mpguo.mutation.SetCreatedAt(u)
	return mpguo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mpguo *MiningProfitGeneralUpdateOne) SetNillableCreatedAt(u *uint32) *MiningProfitGeneralUpdateOne {
	if u != nil {
		mpguo.SetCreatedAt(*u)
	}
	return mpguo
}

// AddCreatedAt adds u to the "created_at" field.
func (mpguo *MiningProfitGeneralUpdateOne) AddCreatedAt(u int32) *MiningProfitGeneralUpdateOne {
	mpguo.mutation.AddCreatedAt(u)
	return mpguo
}

// SetUpdatedAt sets the "updated_at" field.
func (mpguo *MiningProfitGeneralUpdateOne) SetUpdatedAt(u uint32) *MiningProfitGeneralUpdateOne {
	mpguo.mutation.ResetUpdatedAt()
	mpguo.mutation.SetUpdatedAt(u)
	return mpguo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (mpguo *MiningProfitGeneralUpdateOne) AddUpdatedAt(u int32) *MiningProfitGeneralUpdateOne {
	mpguo.mutation.AddUpdatedAt(u)
	return mpguo
}

// SetDeletedAt sets the "deleted_at" field.
func (mpguo *MiningProfitGeneralUpdateOne) SetDeletedAt(u uint32) *MiningProfitGeneralUpdateOne {
	mpguo.mutation.ResetDeletedAt()
	mpguo.mutation.SetDeletedAt(u)
	return mpguo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mpguo *MiningProfitGeneralUpdateOne) SetNillableDeletedAt(u *uint32) *MiningProfitGeneralUpdateOne {
	if u != nil {
		mpguo.SetDeletedAt(*u)
	}
	return mpguo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (mpguo *MiningProfitGeneralUpdateOne) AddDeletedAt(u int32) *MiningProfitGeneralUpdateOne {
	mpguo.mutation.AddDeletedAt(u)
	return mpguo
}

// SetGoodID sets the "good_id" field.
func (mpguo *MiningProfitGeneralUpdateOne) SetGoodID(u uuid.UUID) *MiningProfitGeneralUpdateOne {
	mpguo.mutation.SetGoodID(u)
	return mpguo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (mpguo *MiningProfitGeneralUpdateOne) SetNillableGoodID(u *uuid.UUID) *MiningProfitGeneralUpdateOne {
	if u != nil {
		mpguo.SetGoodID(*u)
	}
	return mpguo
}

// ClearGoodID clears the value of the "good_id" field.
func (mpguo *MiningProfitGeneralUpdateOne) ClearGoodID() *MiningProfitGeneralUpdateOne {
	mpguo.mutation.ClearGoodID()
	return mpguo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (mpguo *MiningProfitGeneralUpdateOne) SetCoinTypeID(u uuid.UUID) *MiningProfitGeneralUpdateOne {
	mpguo.mutation.SetCoinTypeID(u)
	return mpguo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (mpguo *MiningProfitGeneralUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *MiningProfitGeneralUpdateOne {
	if u != nil {
		mpguo.SetCoinTypeID(*u)
	}
	return mpguo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (mpguo *MiningProfitGeneralUpdateOne) ClearCoinTypeID() *MiningProfitGeneralUpdateOne {
	mpguo.mutation.ClearCoinTypeID()
	return mpguo
}

// SetAmount sets the "amount" field.
func (mpguo *MiningProfitGeneralUpdateOne) SetAmount(d decimal.Decimal) *MiningProfitGeneralUpdateOne {
	mpguo.mutation.ResetAmount()
	mpguo.mutation.SetAmount(d)
	return mpguo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (mpguo *MiningProfitGeneralUpdateOne) SetNillableAmount(d *decimal.Decimal) *MiningProfitGeneralUpdateOne {
	if d != nil {
		mpguo.SetAmount(*d)
	}
	return mpguo
}

// AddAmount adds d to the "amount" field.
func (mpguo *MiningProfitGeneralUpdateOne) AddAmount(d decimal.Decimal) *MiningProfitGeneralUpdateOne {
	mpguo.mutation.AddAmount(d)
	return mpguo
}

// ClearAmount clears the value of the "amount" field.
func (mpguo *MiningProfitGeneralUpdateOne) ClearAmount() *MiningProfitGeneralUpdateOne {
	mpguo.mutation.ClearAmount()
	return mpguo
}

// SetToPlatform sets the "to_platform" field.
func (mpguo *MiningProfitGeneralUpdateOne) SetToPlatform(d decimal.Decimal) *MiningProfitGeneralUpdateOne {
	mpguo.mutation.ResetToPlatform()
	mpguo.mutation.SetToPlatform(d)
	return mpguo
}

// SetNillableToPlatform sets the "to_platform" field if the given value is not nil.
func (mpguo *MiningProfitGeneralUpdateOne) SetNillableToPlatform(d *decimal.Decimal) *MiningProfitGeneralUpdateOne {
	if d != nil {
		mpguo.SetToPlatform(*d)
	}
	return mpguo
}

// AddToPlatform adds d to the "to_platform" field.
func (mpguo *MiningProfitGeneralUpdateOne) AddToPlatform(d decimal.Decimal) *MiningProfitGeneralUpdateOne {
	mpguo.mutation.AddToPlatform(d)
	return mpguo
}

// ClearToPlatform clears the value of the "to_platform" field.
func (mpguo *MiningProfitGeneralUpdateOne) ClearToPlatform() *MiningProfitGeneralUpdateOne {
	mpguo.mutation.ClearToPlatform()
	return mpguo
}

// SetToUser sets the "to_user" field.
func (mpguo *MiningProfitGeneralUpdateOne) SetToUser(d decimal.Decimal) *MiningProfitGeneralUpdateOne {
	mpguo.mutation.ResetToUser()
	mpguo.mutation.SetToUser(d)
	return mpguo
}

// SetNillableToUser sets the "to_user" field if the given value is not nil.
func (mpguo *MiningProfitGeneralUpdateOne) SetNillableToUser(d *decimal.Decimal) *MiningProfitGeneralUpdateOne {
	if d != nil {
		mpguo.SetToUser(*d)
	}
	return mpguo
}

// AddToUser adds d to the "to_user" field.
func (mpguo *MiningProfitGeneralUpdateOne) AddToUser(d decimal.Decimal) *MiningProfitGeneralUpdateOne {
	mpguo.mutation.AddToUser(d)
	return mpguo
}

// ClearToUser clears the value of the "to_user" field.
func (mpguo *MiningProfitGeneralUpdateOne) ClearToUser() *MiningProfitGeneralUpdateOne {
	mpguo.mutation.ClearToUser()
	return mpguo
}

// Mutation returns the MiningProfitGeneralMutation object of the builder.
func (mpguo *MiningProfitGeneralUpdateOne) Mutation() *MiningProfitGeneralMutation {
	return mpguo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mpguo *MiningProfitGeneralUpdateOne) Select(field string, fields ...string) *MiningProfitGeneralUpdateOne {
	mpguo.fields = append([]string{field}, fields...)
	return mpguo
}

// Save executes the query and returns the updated MiningProfitGeneral entity.
func (mpguo *MiningProfitGeneralUpdateOne) Save(ctx context.Context) (*MiningProfitGeneral, error) {
	var (
		err  error
		node *MiningProfitGeneral
	)
	if err := mpguo.defaults(); err != nil {
		return nil, err
	}
	if len(mpguo.hooks) == 0 {
		node, err = mpguo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MiningProfitGeneralMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mpguo.mutation = mutation
			node, err = mpguo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mpguo.hooks) - 1; i >= 0; i-- {
			if mpguo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mpguo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mpguo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*MiningProfitGeneral)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MiningProfitGeneralMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mpguo *MiningProfitGeneralUpdateOne) SaveX(ctx context.Context) *MiningProfitGeneral {
	node, err := mpguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mpguo *MiningProfitGeneralUpdateOne) Exec(ctx context.Context) error {
	_, err := mpguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpguo *MiningProfitGeneralUpdateOne) ExecX(ctx context.Context) {
	if err := mpguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpguo *MiningProfitGeneralUpdateOne) defaults() error {
	if _, ok := mpguo.mutation.UpdatedAt(); !ok {
		if miningprofitgeneral.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized miningprofitgeneral.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := miningprofitgeneral.UpdateDefaultUpdatedAt()
		mpguo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mpguo *MiningProfitGeneralUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MiningProfitGeneralUpdateOne {
	mpguo.modifiers = append(mpguo.modifiers, modifiers...)
	return mpguo
}

func (mpguo *MiningProfitGeneralUpdateOne) sqlSave(ctx context.Context) (_node *MiningProfitGeneral, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   miningprofitgeneral.Table,
			Columns: miningprofitgeneral.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: miningprofitgeneral.FieldID,
			},
		},
	}
	id, ok := mpguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MiningProfitGeneral.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mpguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, miningprofitgeneral.FieldID)
		for _, f := range fields {
			if !miningprofitgeneral.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != miningprofitgeneral.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mpguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpguo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitgeneral.FieldCreatedAt,
		})
	}
	if value, ok := mpguo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitgeneral.FieldCreatedAt,
		})
	}
	if value, ok := mpguo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitgeneral.FieldUpdatedAt,
		})
	}
	if value, ok := mpguo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitgeneral.FieldUpdatedAt,
		})
	}
	if value, ok := mpguo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitgeneral.FieldDeletedAt,
		})
	}
	if value, ok := mpguo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: miningprofitgeneral.FieldDeletedAt,
		})
	}
	if value, ok := mpguo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: miningprofitgeneral.FieldGoodID,
		})
	}
	if mpguo.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: miningprofitgeneral.FieldGoodID,
		})
	}
	if value, ok := mpguo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: miningprofitgeneral.FieldCoinTypeID,
		})
	}
	if mpguo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: miningprofitgeneral.FieldCoinTypeID,
		})
	}
	if value, ok := mpguo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: miningprofitgeneral.FieldAmount,
		})
	}
	if value, ok := mpguo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: miningprofitgeneral.FieldAmount,
		})
	}
	if mpguo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: miningprofitgeneral.FieldAmount,
		})
	}
	if value, ok := mpguo.mutation.ToPlatform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: miningprofitgeneral.FieldToPlatform,
		})
	}
	if value, ok := mpguo.mutation.AddedToPlatform(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: miningprofitgeneral.FieldToPlatform,
		})
	}
	if mpguo.mutation.ToPlatformCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: miningprofitgeneral.FieldToPlatform,
		})
	}
	if value, ok := mpguo.mutation.ToUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: miningprofitgeneral.FieldToUser,
		})
	}
	if value, ok := mpguo.mutation.AddedToUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: miningprofitgeneral.FieldToUser,
		})
	}
	if mpguo.mutation.ToUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: miningprofitgeneral.FieldToUser,
		})
	}
	_spec.Modifiers = mpguo.modifiers
	_node = &MiningProfitGeneral{config: mpguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mpguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{miningprofitgeneral.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
